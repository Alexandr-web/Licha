/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ACharty"] = factory();
	else
		root["ACharty"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/ACharty.ts":
/*!***************************!*\
  !*** ./src/ts/ACharty.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ACharty\": () => (/* binding */ ACharty),\n/* harmony export */   \"Utils\": () => (/* reexport safe */ _Utils_Utils__WEBPACK_IMPORTED_MODULE_8__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _ui_Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui/Canvas */ \"./src/ts/ui/Canvas.ts\");\n/* harmony import */ var _ui_chart_Chart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui/chart/Chart */ \"./src/ts/ui/chart/Chart.ts\");\n/* harmony import */ var _ui_axis_AxisY__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/axis/AxisY */ \"./src/ts/ui/axis/AxisY.ts\");\n/* harmony import */ var _ui_chart_LineChart__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/chart/LineChart */ \"./src/ts/ui/chart/LineChart.ts\");\n/* harmony import */ var _ui_Grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/Grid */ \"./src/ts/ui/Grid.ts\");\n/* harmony import */ var _ui_axis_AxisX__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/axis/AxisX */ \"./src/ts/ui/axis/AxisX.ts\");\n/* harmony import */ var _ui_Legend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/Legend */ \"./src/ts/ui/Legend.ts\");\n/* harmony import */ var _ui_elements_BlockInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/elements/BlockInfo */ \"./src/ts/ui/elements/BlockInfo.ts\");\n/* harmony import */ var _Utils_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Utils/Utils */ \"./src/ts/Utils/Utils.ts\");\n\n\n\n\n\n\n\n\n\nclass ACharty {\n    constructor({ selectorCanvas, background, type, title = {}, theme = {}, data = {}, axisY = {}, axisX = {}, line = {}, cap = {}, grid = {}, legend = {}, blockInfo = {}, padding = {\n        top: 10,\n        left: 10,\n        right: 10,\n        bottom: 10,\n    }, }) {\n        // Внутренние отступы\n        this.padding = padding;\n        // Данные колпачка\n        this.cap = cap;\n        // Данные легенды\n        this.legend = legend;\n        // Тип диаграммы\n        this.type = type || \"line\";\n        // Данные задней сетки диаграммы\n        this.grid = grid;\n        // Данные линии\n        this.line = line;\n        // Данные оси ординат\n        this.axisY = axisY;\n        // Данные оси абсцисс\n        this.axisX = axisX;\n        // Данные заголовка диаграммы\n        this.title = title;\n        // Задний фон диаграммы\n        this.background = background;\n        // Селектор холста\n        this.selectorCanvas = selectorCanvas;\n        // Данные окна с информацией об активной группе\n        this.blockInfo = blockInfo;\n        // Данные групп\n        this.data = data;\n        // Стили темы\n        this.theme = theme;\n        // Содержит названия скрытых групп\n        this.hideGroups = [];\n    }\n    /**\n     * Рисует холст\n     * @private\n     * @return {ICanvasClass}\n     */\n    _setCanvas() {\n        return new _ui_Canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.selectorCanvas, this.background, this.theme.canvas).init();\n    }\n    /**\n     * Рисует заголовок диаграммы\n     * @param {IChartClass} canvas Экземпляр класса Canvas\n     * @private\n     */\n    _setChartTitle(canvas) {\n        const { width, height, } = canvas.getSizes();\n        return new _ui_chart_Chart__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.padding, this.data, canvas.ctx, width, height, this.type, this.title, this.theme.title).drawTitle();\n    }\n    /**\n     * Рисует легенду\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @param {IChartClass} chart Экземпляр класса Chart\n     * @private\n     * @return {ILegendClass}\n     */\n    _setLegend(canvas, chart) {\n        const { font, circle, gaps: legendGaps, maxCount, } = this.legend;\n        const showLegend = Boolean(Object.keys(this.legend).length);\n        const gaps = chart.getGapsForLegend(this.axisY, chart.titleData);\n        return new _ui_Legend__WEBPACK_IMPORTED_MODULE_6__[\"default\"](showLegend, this.data, this.line, canvas.ctx, chart.getBounds(), font, circle, this.hideGroups, legendGaps, maxCount, this.theme.legend, this.theme.line).draw(gaps);\n    }\n    /**\n     * Рисует заголовок на оси ординат\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @param {IChartClass} chart Экземпляр класса Chart\n     * @param {ILegendClass} legend Экземпляр класса Legend\n     * @private\n     * @returns {IAxisYClass}\n     */\n    _setAxisYTitle(canvas, chart, legend) {\n        const { step, editValue, title, font, sort, } = this.axisY;\n        const themeForTitle = (this.theme.axis || {}).title;\n        const themeForPoint = (this.theme.axis || {}).point;\n        const gaps = chart.getGapsForYTitle(chart.titleData, Object.assign(Object.assign({}, legend), this.legend), this.axisX);\n        return new _ui_axis_AxisY__WEBPACK_IMPORTED_MODULE_2__[\"default\"](editValue, this.data, canvas.ctx, title, chart.getBounds(), font, this.axisX.sort, themeForTitle, themeForPoint, sort, step).drawTitle(gaps);\n    }\n    /**\n     * Рисует заголовок на оси абсцисс\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @param {IChartClass} chart Экземпляр класса Chart\n     * @param {IAxisYClass} axisX Экземпляр класса AxisX\n     * @private\n     * @returns {IAxisXClass}\n     */\n    _setAxisXTitle(canvas, chart, axisY) {\n        const { font, editName, sort, ignoreNames, title, rotate, } = this.axisX;\n        const themeForTitle = (this.theme.axis || {}).title;\n        const themeForPoint = (this.theme.axis || {}).point;\n        const themeForLine = this.theme.line;\n        const gaps = chart.getGapsForXTitle(axisY);\n        return new _ui_axis_AxisX__WEBPACK_IMPORTED_MODULE_5__[\"default\"](canvas.ctx, this.data, this.line, title, chart.getBounds(), font, editName, sort, rotate, themeForTitle, themeForPoint, ignoreNames, themeForLine).drawTitle(gaps);\n    }\n    /**\n     * Рисует точки\n     * @param {IAxisYClass} axisY Экземпляр класса AxisY\n     * @param {IAxisXClass} axisX Экземпляр класса AxisX\n     * @param {ILegendClass} legend Экземпляр класса Legend\n     * @param {IChartClass} chart Экземпляр класса Chart\n     * @private\n     * @returns {IAxisPoints} Данные всех осевых точек\n     */\n    _setPoints(axisY, axisX, legend, chart) {\n        const y = axisY.drawPoints(chart.getGapsForYPoints(axisY, axisX, chart.titleData, Object.assign(Object.assign({}, this.legend), legend)));\n        const x = axisX.drawPoints(chart.getGapsForXPoints(axisY, axisX));\n        return {\n            pointsY: y.points,\n            pointsX: x.points,\n        };\n    }\n    /**\n     * Рисует заднюю сетку диаграмме\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @param {IAxisXClass} axisX Экземпляр класса AxisX\n     * @param {IAxisYClass} axisY Экземпляр класса AxisY\n     * @private\n     * @returns {IGridClass}\n     */\n    _setGrid(canvas, axisX, axisY) {\n        const { line, format, background, } = this.grid;\n        return new _ui_Grid__WEBPACK_IMPORTED_MODULE_4__[\"default\"](canvas.ctx, axisY.getAxesData(this.data).names, axisY.getMaxTextWidthAtYAxis(), axisY, axisX, background, format, line, this.theme.grid).init();\n    }\n    /**\n     * Обработчик события resize у window\n     * Обновляет график и проверяет ширину окна с break points\n     * @private\n     */\n    _windowResizeHandler() {\n        this.update();\n    }\n    /**\n     * Добавление события resize элементу window\n     * @private\n     */\n    _windowResize() {\n        window.addEventListener(\"resize\", this._windowResizeHandler.bind(this));\n    }\n    /**\n     * Обработчик события mousemove у элемента canvas\n     * Рисует окно с информацией об активной группе\n     * @param {MouseEvent} e Объект события\n     * @param {number} endY Конечная область видимости окна с информацией об активной группе\n     * @param {Array<IPointX>} pointsX Содержит данные всех точек на оси абсцисс\n     * @param {number} startY Начальная область видимости окна с информацией об активной группе\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @param {IBounds} bounds Содержит границы холста\n     * @private\n     */\n    _mousemoveByCanvasHandler(e, endY, pointsX, startY, canvas, bounds) {\n        const mousePos = { x: e.offsetX, y: e.offsetY, };\n        if (mousePos.y <= endY && mousePos.y >= startY) {\n            // Отбираем элементы, которые подходят по координатам на холсте\n            const activeElements = pointsX.map((point) => {\n                if (this.axisX.editName instanceof Function) {\n                    return Object.assign(Object.assign({}, point), { name: this.axisX.editName(point.name) });\n                }\n                return point;\n            }).filter(({ x, group, }) => !this.hideGroups.includes(group) && mousePos.x > (x - 5) && mousePos.x < (x + 5));\n            document.documentElement.setAttribute(\"style\", `cursor: ${activeElements.length ? \"none\" : \"default\"}`);\n            if (activeElements.length) {\n                this.update();\n                const [{ x, }] = activeElements;\n                const { title, groups, background, padding, } = this.blockInfo;\n                const themeForWindow = (this.theme.blockInfo || {}).window;\n                const themeForLine = this.theme.line;\n                const themeForTitle = (this.theme.blockInfo || {}).title;\n                const themeForGroup = (this.theme.blockInfo || {}).group;\n                new _ui_elements_BlockInfo__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.axisY.editValue, this.axisX.editName, this.data, bounds, activeElements, title, groups, x, mousePos.y, background, canvas.ctx, padding, themeForWindow, themeForLine, themeForTitle, themeForGroup).init();\n            }\n        }\n        else {\n            document.documentElement.setAttribute(\"style\", \"cursor: default\");\n        }\n    }\n    /**\n     * Добавление события mousemove элементу canvas\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @param {IBounds} bounds Содержит границы холста\n     * @param {{ pointsX: Array<IPointX>, pointsY: Array<IPointY> }} param2 Содержит данные всех осевых точек\n     * @private\n     */\n    _mousemoveByCanvas(canvas, bounds, { pointsX, pointsY, }) {\n        if (!Object.keys(this.blockInfo).length) {\n            return;\n        }\n        const pointsYOnScreen = pointsY.filter(({ onScreen, }) => onScreen);\n        const { y: firstPointYOrdinate, height: firstPointYHeight, } = pointsYOnScreen[0];\n        const { y: lastPointYOrdinate, height: lastPointYHeight, } = pointsYOnScreen[pointsYOnScreen.length - 1];\n        const endY = lastPointYOrdinate - firstPointYHeight / 2;\n        const startY = firstPointYOrdinate - lastPointYHeight / 2;\n        canvas.canvasElement.addEventListener(\"mousemove\", (e) => this._mousemoveByCanvasHandler(e, endY, pointsX, startY, canvas, bounds));\n    }\n    /**\n     * Обработчик события mouseleave у элемента canvas\n     * Обновляет график и изменяет тип курсора на обычный\n     * @private\n     */\n    _leavemouseFromCanvasAreaHandler() {\n        document.documentElement.setAttribute(\"style\", \"default\");\n        this.update();\n    }\n    /**\n     * Добавление события mouseleave элементу canvas\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @private\n     */\n    _leavemouseFromCanvasArea(canvas) {\n        canvas.canvasElement.addEventListener(\"mouseleave\", this._leavemouseFromCanvasAreaHandler.bind(this));\n    }\n    /**\n     * Обработчик события click у элемента canvas\n     * Скрывает группы при клике на элементы легенды\n     * @param {MouseEvent} e Объект event\n     * @param {Array<IItemLegend>} legendItems Содержит данные элементов легенды\n     * @private\n     */\n    _clickByCanvasAreaHandler(e, legendItems) {\n        const mousePos = { x: e.offsetX, y: e.offsetY, };\n        const findMatchLegendItem = legendItems.find(({ x, y, width, height, }) => {\n            const endX = x + width;\n            const startY = y - height;\n            return (mousePos.x <= endX && mousePos.x >= x) && (mousePos.y <= y && mousePos.y >= startY);\n        });\n        if (findMatchLegendItem) {\n            const { group, } = findMatchLegendItem;\n            const findIdxHideGroup = this.hideGroups.indexOf(group);\n            if (findIdxHideGroup !== -1) {\n                this.hideGroups.splice(findIdxHideGroup, 1);\n            }\n            else {\n                this.hideGroups.push(group);\n            }\n            this.update();\n        }\n    }\n    /**\n     * Добавление события click элементу canvas\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @param {Array<IItemLegend>} legendItems Содержит данные элементов легенды\n     * @private\n     */\n    _clickByCanvasArea(canvas, legendItems) {\n        canvas.canvasElement.addEventListener(\"click\", (e) => this._clickByCanvasAreaHandler(e, legendItems));\n    }\n    /**\n     * Рисует диаграмму в зависимости от ее типа\n     * @param {IAxisYClass} axisY Экземпляр класса AxisY\n     * @param {IAxisXClass} axisX Экземпляр класса AxisX\n     * @param {ICanvasClass} canvas Экземпляр класса Canvas\n     * @private\n     */\n    _drawChartByType(axisY, axisX, canvas) {\n        const { width, height, } = canvas.getSizes();\n        switch (this.type) {\n            case \"line\":\n                new _ui_chart_LineChart__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.data, this.line, this.cap, axisY.points, axisX.points, canvas.ctx, width, height, null, null, this.hideGroups, this.axisY.sort, this.theme.line, this.theme.cap).draw();\n                break;\n        }\n    }\n    // Обновление данных диаграммы\n    update() {\n        const canvas = this._setCanvas();\n        const chart = this._setChartTitle(canvas);\n        const legend = this._setLegend(canvas, chart);\n        const axisY = this._setAxisYTitle(canvas, chart, legend);\n        const axisX = this._setAxisXTitle(canvas, chart, axisY);\n        this._setPoints(axisY, axisX, legend, chart);\n        this._setGrid(canvas, axisX, axisY);\n        this._drawChartByType(axisY, axisX, canvas);\n        return this;\n    }\n    // Рисует диаграмму\n    init() {\n        const canvas = this._setCanvas();\n        const chart = this._setChartTitle(canvas);\n        const legend = this._setLegend(canvas, chart);\n        const axisY = this._setAxisYTitle(canvas, chart, legend);\n        const axisX = this._setAxisXTitle(canvas, chart, axisY);\n        const points = this._setPoints(axisY, axisX, legend, chart);\n        this._mousemoveByCanvas(canvas, chart.getBounds(), points);\n        this._leavemouseFromCanvasArea(canvas);\n        this._clickByCanvasArea(canvas, legend.items);\n        this._setGrid(canvas, axisX, axisY);\n        this._drawChartByType(axisY, axisX, canvas);\n        this._windowResize();\n        return this;\n    }\n}\n\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ACharty.ts?");

/***/ }),

/***/ "./src/ts/Utils/Utils.ts":
/*!*******************************!*\
  !*** ./src/ts/Utils/Utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _themes_light__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./themes/light */ \"./src/ts/Utils/themes/light.ts\");\n/* harmony import */ var _themes_dark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./themes/dark */ \"./src/ts/Utils/themes/dark.ts\");\n/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colors */ \"./src/ts/Utils/colors.ts\");\n\n\n\nclass Utils {\n    constructor() {\n        // Содержит светлые и темные темы\n        this.themes = { dark: _themes_dark__WEBPACK_IMPORTED_MODULE_1__[\"default\"], light: _themes_light__WEBPACK_IMPORTED_MODULE_0__[\"default\"], };\n        // Содержит цвета\n        this.colors = _colors__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n    }\n    /**\n     * Определяет тему\n     * @param {number} num Индекс темы\n     * @param {TTypeTheme} type Тип темы (\"dark\" или \"light\")\n     * @returns {ITheme | {}} Данные темы\n     */\n    getTheme(num = 0, type = \"dark\") {\n        if (!this.themes[type] || !this.themes[type][num]) {\n            return {};\n        }\n        return this.themes[type][num];\n    }\n    /**\n     * Определяет цвет\n     * @param {string} name Название ключа цвета\n     * @param {number} opacity Прозрачность (от 0 до 1)\n     * @returns {string} Цвет\n     */\n    getColor(name, opacity = 1) {\n        if (!(this.colors[name] instanceof Function)) {\n            return \"\";\n        }\n        return this.colors[name](opacity);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utils);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/Utils/Utils.ts?");

/***/ }),

/***/ "./src/ts/Utils/colors.ts":
/*!********************************!*\
  !*** ./src/ts/Utils/colors.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/getRGB */ \"./src/ts/helpers/getRGB.ts\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    white: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,255,255\", opacity),\n    whiteSmoke: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"245,245,245\", opacity),\n    antiFlashWhite: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"235,235,235\", opacity),\n    platinum: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"224,224,224\", opacity),\n    timberwolf: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"214,214,214\", opacity),\n    silver: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"204,204,204\", opacity),\n    bistre: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"204,204,204\", opacity),\n    black: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,0,0\", opacity),\n    blackBean: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"61,12,2\", opacity),\n    blackOlive: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"59,60,54\", opacity),\n    cafeNoir: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"75,54,33\", opacity),\n    charcoal: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"54,69,79\", opacity),\n    darkPurple: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"48,25,52\", opacity),\n    ebony: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"85,93,80\", opacity),\n    eclipse: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,0,32\", opacity),\n    eerieBlack: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"27,27,27\", opacity),\n    jet: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"52,52,52\", opacity),\n    licorice: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"26,17,16\", opacity),\n    midnight: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,0,64\", opacity),\n    night: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"17,17,17\", opacity),\n    onyx: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"53,56,57\", opacity),\n    outerSpace: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"65,74,76\", opacity),\n    raisinBlack: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"36,33,36\", opacity),\n    richBlack: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"1,11,19\", opacity),\n    russianViolet: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"50,23,77\", opacity),\n    smokyBlack: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"16,12,8\", opacity),\n    taupe: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"72,60,50\", opacity),\n    indianRed: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"205,92,92\", opacity),\n    lightCoral: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"240,128,128\", opacity),\n    salmon: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"250,128,114\", opacity),\n    darkSalmon: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"233,150,122\", opacity),\n    lightSalmon: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,160,122\", opacity),\n    crimson: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"220,20,60\", opacity),\n    red: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,0,0\", opacity),\n    fireBrick: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"178,34,3\", opacity),\n    darkRed: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"139,0,0\", opacity),\n    pink: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,192,203\", opacity),\n    lightPink: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,182,193\", opacity),\n    hotPink: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,105,180\", opacity),\n    deepPink: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,20,147\", opacity),\n    mediumVioletRed: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"199,21,133\", opacity),\n    paleVioletRed: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"219,112,147\", opacity),\n    coral: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,127,8\", opacity),\n    tomato: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,99,7\", opacity),\n    orangeRed: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,69,0\", opacity),\n    darkOrange: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,140,0\", opacity),\n    orange: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,165,0\", opacity),\n    gold: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,215,0\", opacity),\n    yellow: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,255,0\", opacity),\n    lightYellow: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,255,224\", opacity),\n    lemonChiffon: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,250,205\", opacity),\n    lightGoldenrodYellow: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"250,250,210\", opacity),\n    papayaWhip: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,239,213\", opacity),\n    moccasin: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,228,181\", opacity),\n    peachPuff: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,218,185\", opacity),\n    paleGoldenrod: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"238,232,170\", opacity),\n    khaki: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"240,230,140\", opacity),\n    darkKhaki: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"189,183,107\", opacity),\n    lavender: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"230,230,250\", opacity),\n    thistle: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"216,191,216\", opacity),\n    plum: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"221,160,221\", opacity),\n    violet: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"238,130,238\", opacity),\n    orchid: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"218,112,214\", opacity),\n    fuchsia: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,0,255\", opacity),\n    magenta: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"255,0,255\", opacity),\n    mediumOrchid: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"186,85,211\", opacity),\n    mediumPurple: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"147,112,219\", opacity),\n    rebeccaPurple: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"102,51,153\", opacity),\n    blueViolet: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"138,43,226\", opacity),\n    darkViolet: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"148,0,211\", opacity),\n    darkOrchid: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"153,50,204\", opacity),\n    darkMagenta: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"139,0,139\", opacity),\n    purple: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"128,0,128\", opacity),\n    indigo: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"75,0,130\", opacity),\n    slateBlue: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"106,90,205\", opacity),\n    darkSlateBlue: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"72,61,139\", opacity),\n    mediumSlateBlue: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"123,104,238\", opacity),\n    greenYellow: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"173,255,47\", opacity),\n    chartreuse: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"127,255,0\", opacity),\n    lawnGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"124,252,0\", opacity),\n    lime: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,255,0\", opacity),\n    limeGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"50,205,50\", opacity),\n    paleGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"152,251,152\", opacity),\n    lightGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"144,238,144\", opacity),\n    mediumSpringGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,250,154\", opacity),\n    springGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,255,127\", opacity),\n    mediumSeaGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"60,179,113\", opacity),\n    seaGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"46,139,87\", opacity),\n    forestGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"34,139,34\", opacity),\n    green: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,128,0\", opacity),\n    darkGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,100,0\", opacity),\n    yellowGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"154,205,50\", opacity),\n    oliveDrab: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"107,142,35\", opacity),\n    olive: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"128,128,0\", opacity),\n    darkOliveGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"85,107,47\", opacity),\n    mediumAquamarine: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"102,205,170\", opacity),\n    darkSeaGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"143,188,139\", opacity),\n    lightSeaGreen: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"32,178,170\", opacity),\n    darkCyan: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,139,139\", opacity),\n    teal: (opacity) => (0,_helpers_getRGB__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0,128,128\", opacity),\n});\n\n\n//# sourceURL=webpack://ACharty/./src/ts/Utils/colors.ts?");

/***/ }),

/***/ "./src/ts/Utils/themes/dark.ts":
/*!*************************************!*\
  !*** ./src/ts/Utils/themes/dark.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\n    {\n        canvas: { background: \"#10143A\", },\n        title: { color: \"#EBEDFA\", },\n        legend: { color: \"#9CA1BC\", },\n        axis: { title: { color: \"#EBEDFA\", }, point: { color: \"#9CA1BC\", }, },\n        grid: { color: \"#070818\", },\n        line: {\n            color: [\"#4C359F\", \"#6285C1\", \"#D37DE7\", \"#318CE7\", \"#50C878\"],\n            fill: [\n                [\"rgba(76,53,159,0.3)\", \"transparent\"],\n                [\"rgba(98,133,193,0.3)\", \"transparent\"],\n                [\"rgba(211,125,231,0.3)\", \"transparent\"],\n                [\"rgba(49,140,231,0.3)\", \"transparent\"],\n                [\"rgba(80,200,120,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#4C359F\", \"#6285C1\", \"#D37DE7\", \"#318CE7\", \"#50C878\"],\n            strokeColor: [\"#10143A\", \"#10143A\", \"#10143A\", \"#10143A\", \"#10143A\"],\n        },\n        blockInfo: {\n            window: { color: [\"#292F4F\", \"#262C50\"], },\n            title: { color: \"#EBEDFA\", },\n            group: { color: \"#9CA1BC\", },\n        },\n    },\n    {\n        canvas: { background: \"#1B1B1B\", },\n        title: { color: \"#E9E9E9\", },\n        legend: { color: \"#878A94\", },\n        axis: { title: { color: \"#E9E9E9\", }, point: { color: \"#878A94\", }, },\n        grid: { color: \"#272727\", },\n        line: {\n            color: [\"#53CA6B\", \"#A93E62\", \"#3344B1\", \"#774CAF\"],\n            fill: [\n                [\"rgba(80,200,120,0.3)\", \"transparent\"],\n                [\"rgba(169,62,98,0.3)\", \"transparent\"],\n                [\"rgba(51,68,177,0.3)\", \"transparent\"],\n                [\"rgba(119,76,175,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#53CA6B\", \"#A93E62\", \"#3344B1\", \"#774CAF\"],\n            strokeColor: [\"#1B1B1B\", \"#1B1B1B\", \"#1B1B1B\", \"#1B1B1B\"],\n        },\n        blockInfo: {\n            window: { color: \"#070707\", },\n            title: { color: \"#E9E9E9\", },\n            group: { color: \"#878A94\", },\n        },\n    },\n    {\n        canvas: { background: \"#262628\", },\n        title: { color: \"#FDFDFE\", },\n        legend: { color: \"#46454B\", },\n        axis: { title: { color: \"#FDFDFE\", }, point: { color: \"#46454B\", }, },\n        grid: { color: \"#2D2D2D\", },\n        line: {\n            color: [\"#A05663\", \"#608C7B\", \"#488ED5\", \"#D5590D\"],\n            fill: [\n                [\"rgba(160,86,99,0.3)\", \"transparent\"],\n                [\"rgba(96,140,123,0.3)\", \"transparent\"],\n                [\"rgba(72,142,213,0.3)\", \"transparent\"],\n                [\"rgba(213,89,13,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#A05663\", \"#608C7B\", \"#488ED5\", \"#D5590D\"],\n            strokeColor: [\"#262628\", \"#262628\", \"#262628\", \"#262628\"],\n        },\n        blockInfo: {\n            window: { color: \"#1C1C1E\", },\n            title: { color: \"#FDFDFE\", },\n            group: { color: \"#46454B\", },\n        },\n    },\n    {\n        canvas: { background: \"#212121\", },\n        title: { color: \"#E5E5E5\", },\n        legend: { color: \"#696969\", },\n        axis: { title: { color: \"#E5E5E5\", }, point: { color: \"#696969\", }, },\n        grid: { color: \"#3B3B3B\", },\n        line: {\n            color: [\"#CDE382\", \"#DF5844\", \"#546559\", \"#6D639D\"],\n            fill: [\n                [\"rgba(205,227,130,0.2)\", \"transparent\"],\n                [\"rgba(223,88,68,0.2)\", \"transparent\"],\n                [\"rgba(84,101,89,0.2)\", \"transparent\"],\n                [\"rgba(109,99,157,0.2)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#CDE382\", \"#DF5844\", \"#546559\", \"#6D639D\"],\n            strokeColor: [\"#212121\", \"#212121\", \"#212121\", \"#212121\"],\n        },\n        blockInfo: {\n            window: { color: \"#000000\", },\n            title: { color: \"#E5E5E5\", },\n            group: { color: \"#696969\", },\n        },\n    },\n    {\n        canvas: { background: \"#160D23\", },\n        title: { color: \"#EDEAEF\", },\n        legend: { color: \"#4B4162\", },\n        axis: { title: { color: \"#EDEAEF\", }, point: { color: \"#4B4162\", }, },\n        grid: { color: \"#211732\", },\n        line: {\n            color: [\"#6EFBDD\", \"#F84E82\", \"#5F4591\", \"#71FB88\", \"#FBE471\"],\n            fill: [\n                [\"rgba(67,50,102,0.5)\", \"transparent\"],\n                [\"rgba(248,78,130,0.3)\", \"transparent\"],\n                [\"rgba(95,69,145,0.3)\", \"transparent\"],\n                [\"rgba(113,251,136,0.3)\", \"transparent\"],\n                [\"rgba(251,228,113,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#6EFBDD\", \"#F84E82\", \"#5F4591\", \"#71FB88\", \"#FBE471\"],\n            strokeColor: [],\n        },\n        blockInfo: {\n            window: { color: \"#000000\", },\n            title: { color: \"#EDEAEF\", },\n            group: { color: \"#4B4162\", },\n        },\n    },\n    {\n        canvas: { background: \"#371F67\", },\n        title: { color: \"#DAC6FF\", },\n        legend: { color: \"#836FAB\", },\n        axis: { title: { color: \"#DAC6FF\", }, point: { color: \"#836FAB\", }, },\n        grid: { color: \"#4B316B\", },\n        line: {\n            color: [\"#9F3F7D\", \"#6FA1CD\", \"#E7877B\", \"#F6488A\"],\n            fill: [\n                [\"rgba(159,63,125,0.5)\", \"transparent\"],\n                [\"rgba(111,161,205,0.5)\", \"transparent\"],\n                [\"rgba(231,135,123,0.5)\", \"transparent\"],\n                [\"rgba(246,72,138,0.5)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#9F3F7D\", \"#6FA1CD\", \"#E7877B\", \"#F6488A\"],\n            strokeColor: [\"#371F67\", \"#371F67\", \"#371F67\", \"#371F67\"],\n        },\n        blockInfo: {\n            window: { color: \"#DAC6FF\", },\n            title: { color: \"#4B316B\", },\n            group: { color: \"#836FAB\", },\n        },\n    },\n    {\n        canvas: { background: \"#2A2C3B\", },\n        title: { color: \"#CCCCD8\", },\n        legend: { color: \"#7C7E83\", },\n        axis: { title: { color: \"#CCCCD8\", }, point: { color: \"#7C7E83\", }, },\n        grid: { color: \"#3E4156\", },\n        line: {\n            color: [\"#369F8F\", \"#2D6685\", \"#E48667\", \"#B25E8C\", \"#E3E77B\"],\n            fill: [\n                [\"rgba(54,159,143,0.3)\", \"transparent\"],\n                [\"rgba(45,102,133,0.3)\", \"transparent\"],\n                [\"rgba(228,134,103,0.3)\", \"transparent\"],\n                [\"rgba(178,94,140,0.3)\", \"transparent\"],\n                [\"rgba(227,231,123,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#369F8F\", \"#2D6685\", \"#E48667\", \"#B25E8C\", \"#E3E77B\"],\n            strokeColor: [\"#2A2C3B\", \"#2A2C3B\", \"#2A2C3B\", \"#2A2C3B\", \"#2A2C3B\"],\n        },\n        blockInfo: {\n            window: { color: \"#29384B\", },\n            title: { color: \"#CCCCD8\", },\n            group: { color: \"#7C7E83\", },\n        },\n    },\n    {\n        canvas: { background: \"#22252A\", },\n        title: { color: \"#88AFB4\", },\n        legend: { color: \"#317375\", },\n        axis: { title: { color: \"#88AFB4\", }, point: { color: \"#317375\", }, },\n        grid: { color: \"#33373E\", },\n        line: {\n            color: [\"#11B8BF\", \"#2C5A61\", \"#99FFFF\"],\n            fill: [\n                [\"rgba(17,184,191,0.3)\", \"transparent\"],\n                [\"rgba(44,90,97,0.3)\", \"transparent\"],\n                [\"rgba(153,255,255,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#11B8BF\", \"#2C5A61\", \"#99FFFF\"],\n            strokeColor: [],\n        },\n        blockInfo: {\n            window: { color: \"#121418\", },\n            title: { color: \"#88AFB4\", },\n            group: { color: \"#317375\", },\n        },\n    },\n    {\n        canvas: { background: \"#2F3245\", },\n        title: { color: \"#D7D9E8\", },\n        legend: { color: \"#828598\", },\n        axis: { title: { color: \"#D7D9E8\", }, point: { color: \"#828598\", }, },\n        grid: { color: \"#373B4C\", },\n        line: {\n            color: [\"#D4D68A\", \"#60AFA6\", \"#5A7DCF\", \"#D580E7\"],\n            fill: [\n                [\"rgba(212,214,138,0.3)\", \"transparent\"],\n                [\"rgba(96,175,166,0.3)\", \"transparent\"],\n                [\"rgba(90,125,207,0.3)\", \"transparent\"],\n                [\"rgba(213,128,231,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#D4D68A\", \"#60AFA6\", \"#5A7DCF\", \"#D580E7\"],\n            strokeColor: [\"#2F3245\", \"#2F3245\", \"#2F3245\", \"#2F3245\"],\n        },\n        blockInfo: {\n            window: { color: \"#262938\", },\n            title: { color: \"#D7D9E8\", },\n            group: { color: \"#828598\", },\n        },\n    },\n    {\n        canvas: { background: \"#3C4256\", },\n        title: { color: \"#FFF4F7\", },\n        legend: { color: \"#B3B7BE\", },\n        axis: { title: { color: \"#FFF4F7\", }, point: { color: \"#B3B7BE\", }, },\n        grid: { color: \"#4C5061\", },\n        line: {\n            color: [\"#FCFFFF\", \"#85EDFF\", \"#FC8EFF\"],\n            fill: [\n                [\"rgba(252,255,255,0.3)\", \"transparent\"],\n                [\"rgba(133,237,255,0.3)\", \"transparent\"],\n                [\"rgba(252,142,255,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#B3B7BE\", \"#A6F2FF\", \"#FDBBFF\"],\n            strokeColor: [\"#FCFFFF\", \"#85EDFF\", \"#FC8EFF\"],\n        },\n        blockInfo: {\n            window: { color: \"#2D303E\", },\n            title: { color: \"#FFF4F7\", },\n            group: { color: \"#B3B7BE\", },\n        },\n    },\n    {\n        canvas: { background: \"#3D404F\", },\n        title: { color: \"#E1E1F0\", },\n        legend: { color: \"#C8C8D5\", },\n        axis: { title: { color: \"#E1E1F0\", }, point: { color: \"#C8C8D5\", }, },\n        grid: { color: \"#484B5A\", },\n        line: { color: [\"#6CB1F8\", \"#F7D076\", \"#E9945A\", \"#CFD4DA\"], },\n        cap: { color: [\"#6CB1F8\", \"#F7D076\", \"#E9945A\", \"#CFD4DA\"], },\n        blockInfo: {\n            window: { color: \"#2D303E\", },\n            title: { color: \"#E1E1F0\", },\n            group: { color: \"#C8C8D5\", },\n        },\n    },\n    {\n        canvas: { background: \"#1F212E\", },\n        title: { color: \"#C6CFE4\", },\n        legend: { color: \"#747985\", },\n        axis: { title: { color: \"#C6CFE4\", }, point: { color: \"#747985\", }, },\n        grid: { color: \"#2D2F3C\", },\n        line: {\n            color: [\"#D188F5\", \"#3E99E8\", \"#9244E9\", \"#EDDFF6\"],\n            fill: [\n                [\"rgba(229,181,239,0.3)\", \"transparent\"],\n                [\"rgba(77,132,236,0.3)\", \"transparent\"],\n                [\"rgba(146,68,233,0.3)\", \"transparent\"],\n                [\"rgba(237,223,246,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#D188F5\", \"#3E99E8\", \"#9244E9\", \"#EDDFF6\"],\n            strokeColor: [\"#1F212E\", \"#1F212E\", \"#1F212E\", \"#1F212E\"],\n        },\n        blockInfo: {\n            window: { color: \"#0F111E\", },\n            title: { color: \"#C6CFE4\", },\n            group: { color: \"#747985\", },\n        },\n    },\n    {\n        canvas: { background: \"#171717\", },\n        title: { color: \"#D9D9D9\", },\n        legend: { color: \"#BBBBBB\", },\n        axis: { title: { color: \"#D9D9D9\", }, point: { color: \"#BBBBBB\", }, },\n        grid: { color: \"#2C2C2C\", },\n        line: {\n            color: [\"#C46BD1\", \"#8157E3\", \"#74E8BD\", \"#FCB72A\"],\n            fill: [\n                [\"rgba(196,107,209,0.3)\", \"transparent\"],\n                [\"rgba(129,87,227,0.3)\", \"transparent\"],\n                [\"rgba(116,232,189,0.3)\", \"transparent\"],\n                [\"rgba(252,183,42,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#C46BD1\", \"#8157E3\", \"#74E8BD\", \"#FCB72A\"],\n            strokeColor: [\"#171717\", \"#171717\", \"#171717\", \"#171717\"],\n        },\n        blockInfo: {\n            window: { color: \"#000000\", },\n            title: { color: \"#D9D9D9\", },\n            group: { color: \"#BBBBBB\", },\n        },\n    },\n    {\n        canvas: { background: \"#2A2430\", },\n        title: { color: \"#C8C0D0\", },\n        legend: { color: \"#938D99\", },\n        axis: { title: { color: \"#C8C0D0\", }, point: { color: \"#938D99\", }, },\n        grid: { color: \"#38323E\", },\n        line: {\n            color: [\"#0FE5F3\", \"#138CED\", \"#E548E3\", \"#5A4DD3\", \"#4DD35A\"],\n            fill: [\n                [\"rgba(15,229,243,0.3)\", \"transparent\"],\n                [\"rgba(19,140,237,0.3)\", \"transparent\"],\n                [\"rgba(229,72,227,0.3)\", \"transparent\"],\n                [\"rgba(90,77,211,0.3)\", \"transparent\"],\n                [\"rgba(77,211,90,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#0FE5F3\", \"#138CED\", \"#E548E3\", \"#5A4DD3\", \"#4DD35A\"],\n            strokeColor: [\"#2A2430\", \"#2A2430\", \"#2A2430\", \"#2A2430\", \"#2A2430\"],\n        },\n        blockInfo: {\n            window: { color: \"#100D12\", },\n            title: { color: \"#C8C0D0\", },\n            group: { color: \"#938D99\", },\n        },\n    },\n    {\n        canvas: { background: \"#383B4A\", },\n        title: { color: \"#DBD9E6\", },\n        legend: { color: \"#C3C2CD\", },\n        axis: { title: { color: \"#DBD9E6\", }, point: { color: \"#C3C2CD\", }, },\n        grid: { color: \"#5C6177\", },\n        line: {\n            color: [\"#52CFE7\", \"#1E77E0\", \"#EA9F41\", \"#0A8792\", \"#94398C\"],\n            fill: [\n                [\"rgba(82,207,231,0.3)\", \"transparent\"],\n                [\"rgba(30,119,224,0.3)\", \"transparent\"],\n                [\"rgba(234,159,65,0.3)\", \"transparent\"],\n                [\"rgba(10,135,146,0.3)\", \"transparent\"],\n                [\"rgba(148,57,140,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#52CFE7\", \"#1E77E0\", \"#EA9F41\", \"#0A8792\", \"#94398C\"],\n            strokeColor: [\"#383B4A\", \"#383B4A\", \"#383B4A\", \"#383B4A\", \"#383B4A\"],\n        },\n        blockInfo: {\n            window: { color: \"#343746\", },\n            title: { color: \"#DBD9E6\", },\n            group: { color: \"#C3C2CD\", },\n        },\n    },\n    {\n        canvas: { background: \"#130F14\", },\n        title: { color: \"#ADADB2\", },\n        legend: { color: \"#8A8A8E\", },\n        axis: { title: { color: \"#ADADB2\", }, point: { color: \"#8A8A8E\", }, },\n        grid: { color: \"#2C2E38\", },\n        line: {\n            color: [\"#A62D33\", \"#56A249\", \"#DBBD55\", \"#0A8792\", \"#863CB0\"],\n            fill: [\n                [\"rgba(166,45,51,0.3)\", \"transparent\"],\n                [\"rgba(86,162,73,0.3)\", \"transparent\"],\n                [\"rgba(234,159,65,0.3)\", \"transparent\"],\n                [\"rgba(10,135,146,0.3)\", \"transparent\"],\n                [\"rgba(134,60,176,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#A62D33\", \"#56A249\", \"#DBBD55\", \"#0A8792\", \"#863CB0\"],\n            strokeColor: [\"#130F14\", \"#130F14\", \"#130F14\", \"#130F14\", \"#130F14\"],\n        },\n        blockInfo: {\n            window: { color: \"#050506\", },\n            title: { color: \"#ADADB2\", },\n            group: { color: \"#8A8A8E\", },\n        },\n    },\n    {\n        canvas: { background: \"#212338\", },\n        title: { color: \"#97B7BF\", },\n        legend: { color: \"#7F99A0\", },\n        axis: { title: { color: \"#97B7BF\", }, point: { color: \"#7F99A0\", }, },\n        grid: { color: \"#40435C\", },\n        line: {\n            color: [\"#FB6F74\", \"#F2A652\", \"#CB4C8C\", \"#17C5CB\", \"#25F6B4\"],\n            fill: [\n                [\"rgba(251,111,116,0.3)\", \"transparent\"],\n                [\"rgba(242,166,82,0.3)\", \"transparent\"],\n                [\"rgba(203,76,140,0.3)\", \"transparent\"],\n                [\"rgba(23,197,203,0.3)\", \"transparent\"],\n                [\"rgba(37,246,180,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#FB6F74\", \"#F2A652\", \"#CB4C8C\", \"#17C5CB\", \"#25F6B4\"],\n            strokeColor: [\"#212338\", \"#212338\", \"#212338\", \"#212338\", \"#212338\"],\n        },\n        blockInfo: {\n            window: { color: \"#171827\", },\n            title: { color: \"#97B7BF\", },\n            group: { color: \"#7F99A0\", },\n        },\n    },\n    {\n        canvas: { background: \"#0E0A01\", },\n        title: { color: \"#C4B5D0\", },\n        legend: { color: \"#9F93A9\", },\n        axis: { title: { color: \"#C4B5D0\", }, point: { color: \"#9F93A9\", }, },\n        grid: { color: \"#1B100D\", },\n        line: {\n            color: [\"#7C51AB\", \"#AAA8A9\", \"#C89DFA\"],\n            fill: [\n                [\"rgba(124,81,171,0.3)\", \"transparent\"],\n                [\"rgba(170,168,169,0.3)\", \"transparent\"],\n                [\"rgba(200,157,250,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#7C51AB\", \"#AAA8A9\", \"#C89DFA\"],\n            strokeColor: [\"#0E0A01\", \"#0E0A01\", \"#0E0A01\"],\n        },\n        blockInfo: {\n            window: { color: \"#000000\", },\n            title: { color: \"#C4B5D0\", },\n            group: { color: \"#9F93A9\", },\n        },\n    },\n    {\n        canvas: { background: \"#000000\", },\n        title: { color: \"#C5C5C5\", },\n        legend: { color: \"#ACACAC\", },\n        axis: { title: { color: \"#C5C5C5\", }, point: { color: \"#ACACAC\", }, },\n        grid: { color: \"#1E1E1E\", },\n        line: {\n            color: [\"#FC1819\", \"#FFF2F0\", \"#333532\", \"#C0BFC0\", \"#99342F\"],\n            fill: [\n                [\"rgba(252,24,25,0.3)\", \"transparent\"],\n                [\"rgba(255,242,240,0.3)\", \"transparent\"],\n                [\"rgba(51,53,50,0.3)\", \"transparent\"],\n                [\"rgba(192,191,192,0.3)\", \"transparent\"],\n                [\"rgba(153,52,47,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#FC1819\", \"#FFF2F0\", \"#333532\", \"#C0BFC0\", \"#99342F\"],\n            strokeColor: [\"#000000\", \"#000000\", \"#000000\", \"#000000\", \"#000000\"],\n        },\n        blockInfo: {\n            window: { color: \"#1E1E1E\", },\n            title: { color: \"#C5C5C5\", },\n            group: { color: \"#ACACAC\", },\n        },\n    },\n    {\n        canvas: { background: \"#193565\", },\n        title: { color: \"#E7EDFF\", },\n        legend: { color: \"#CCD1E1\", },\n        axis: { title: { color: \"#E7EDFF\", }, point: { color: \"#CCD1E1\", }, },\n        grid: { color: \"#102241\", },\n        line: {\n            color: [\"#9E51D0\", \"#6485E2\", \"#01A8D0\", \"#0154CE\"],\n            fill: [\n                [\"rgba(158,81,208,0.3)\", \"transparent\"],\n                [\"rgba(100,133,226,0.3)\", \"transparent\"],\n                [\"rgba(1,168,208,0.3)\", \"transparent\"],\n                [\"rgba(1,84,206,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#9E51D0\", \"#6485E2\", \"#01A8D0\", \"#0154CE\"],\n            strokeColor: [\"#193565\", \"#193565\", \"#193565\", \"#193565\"],\n        },\n        blockInfo: {\n            window: { color: [\"#0A1427\", \"#152D56\"], },\n            title: { color: \"#E7EDFF\", },\n            group: { color: \"#CCD1E1\", },\n        },\n    },\n    {\n        canvas: { background: \"#211E3D\", },\n        title: { color: \"#FDFEF8\", },\n        legend: { color: \"#D5D6D1\", },\n        axis: { title: { color: \"#FDFEF8\", }, point: { color: \"#D5D6D1\", }, },\n        grid: { color: \"#373356\", },\n        line: {\n            color: [\"#F326A3\", \"#9153F4\", \"#F2A543\", \"#FFFCFF\"],\n            fill: [\n                [\"rgba(243,38,163,0.3)\", \"transparent\"],\n                [\"rgba(145,83,244,0.3)\", \"transparent\"],\n                [\"rgba(242,165,67,0.3)\", \"transparent\"],\n                [\"rgba(255,252,255,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#F326A3\", \"#9153F4\", \"#F2A543\", \"#FFFCFF\"],\n            strokeColor: [\"#211E3D\", \"#211E3D\", \"#211E3D\", \"#211E3D\"],\n        },\n        blockInfo: {\n            window: { color: [\"#121021\", \"#151327\"], },\n            title: { color: \"#FDFEF8\", },\n            group: { color: \"#D5D6D1\", },\n        },\n    },\n    {\n        canvas: { background: \"#09284B\", },\n        title: { color: \"#F4F8FD\", },\n        legend: { color: \"#C3C6CA\", },\n        axis: { title: { color: \"#F4F8FD\", }, point: { color: \"#C3C6CA\", }, },\n        grid: { color: \"#0B3F74\", },\n        line: {\n            color: [\"#FB917E\", \"#14C0D3\", \"#7659E5\", \"#C64264\", \"#148B73\"],\n            fill: [\n                [\"rgba(251,145,126,0.3)\", \"transparent\"],\n                [\"rgba(20,192,211,0.3)\", \"transparent\"],\n                [\"rgba(118,89,229,0.3)\", \"transparent\"],\n                [\"rgba(198,66,100,0.3)\", \"transparent\"],\n                [\"rgba(20,139,115,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#FB917E\", \"#14C0D3\", \"#7659E5\", \"#C64264\", \"#148B73\"],\n            strokeColor: [\"#09284B\", \"#09284B\", \"#09284B\", \"#09284B\", \"#09284B\"],\n        },\n        blockInfo: {\n            window: { color: \"#030F1B\", },\n            title: { color: \"#F4F8FD\", },\n            group: { color: \"#C3C6CA\", },\n        },\n    },\n    {\n        canvas: { background: \"#474A5B\", },\n        title: { color: \"#CADBFF\", },\n        legend: { color: \"#94A0BB\", },\n        axis: { title: { color: \"#CADBFF\", }, point: { color: \"#94A0BB\", }, },\n        grid: { color: \"#777B8E\", },\n        line: {\n            color: [\"#1A78F5\", \"#74C278\", \"#CD4560\", \"#C5F664\", \"#36DED3\"],\n            fill: [\n                [\"rgba(26,120,245,0.3)\", \"transparent\"],\n                [\"rgba(116,194,120,0.3)\", \"transparent\"],\n                [\"rgba(205,69,96,0.3)\", \"transparent\"],\n                [\"rgba(197,246,100,0.3)\", \"transparent\"],\n                [\"rgba(54,222,211,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#474A5B\", \"#474A5B\", \"#474A5B\", \"#474A5B\", \"#474A5B\"],\n            strokeColor: [\"#1A78F5\", \"#74C278\", \"#CD4560\", \"#C5F664\", \"#36DED3\"],\n        },\n        blockInfo: {\n            window: { color: \"#292B35\", },\n            title: { color: \"#CADBFF\", },\n            group: { color: \"#94A0BB\", },\n        },\n    },\n    {\n        canvas: { background: \"#201F25\", },\n        title: { color: \"#F8F9F8\", },\n        legend: { color: \"#CFD0CF\", },\n        axis: { title: { color: \"#F8F9F8\", }, point: { color: \"#CFD0CF\", }, },\n        grid: { color: \"#36393E\", },\n        line: {\n            color: [\"#C75770\", \"#C7002B\", \"#FF0037\", \"#710037\"],\n            fill: [\n                [\"rgba(199,87,112,0.3)\", \"transparent\"],\n                [\"rgba(199,0,43,0.3)\", \"transparent\"],\n                [\"rgba(255,0,55,0.3)\", \"transparent\"],\n                [\"rgba(113,0,55,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#201F25\", \"#201F25\", \"#201F25\", \"#201F25\"],\n            strokeColor: [\"#C75770\", \"#C7002B\", \"#FF0037\", \"#710037\"],\n        },\n        blockInfo: {\n            window: { color: \"#080809\", },\n            title: { color: \"#F8F9F8\", },\n            group: { color: \"#CFD0CF\", },\n        },\n    },\n    {\n        canvas: { background: \"#36446B\", },\n        title: { color: \"#F1F4F8\", },\n        legend: { color: \"#C7CACD\", },\n        axis: { title: { color: \"#F1F4F8\", }, point: { color: \"#C7CACD\", }, },\n        grid: { color: \"#4E629A\", },\n        line: {\n            color: [\"#358CBE\", \"#35B59D\", \"#5462DD\", \"#8862DD\"],\n            fill: [\n                [\"rgba(53,140,190,0.3)\", \"transparent\"],\n                [\"rgba(53,181,157,0.3)\", \"transparent\"],\n                [\"rgba(84,98,221,0.3)\", \"transparent\"],\n                [\"rgba(136,98,221,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#36446B\", \"#36446B\", \"#36446B\", \"#36446B\"],\n            strokeColor: [\"#358CBE\", \"#35B59D\", \"#5462DD\", \"#8862DD\"],\n        },\n        blockInfo: {\n            window: { color: \"#1D2438\", },\n            title: { color: \"#F1F4F8\", },\n            group: { color: \"#C7CACD\", },\n        },\n    }\n]);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/Utils/themes/dark.ts?");

/***/ }),

/***/ "./src/ts/Utils/themes/light.ts":
/*!**************************************!*\
  !*** ./src/ts/Utils/themes/light.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\n    {\n        canvas: { background: \"#FFFFFF\", },\n        title: { color: \"#2E2F35\", },\n        legend: { color: \"#484A53\", },\n        axis: { title: { color: \"#2E2F35\", }, point: { color: \"#484A53\", }, },\n        grid: { color: \"#EDEDEC\", },\n        line: {\n            color: [\"rgba(178,207,231,0.9)\", \"rgba(178,83,231,0.9)\", \"rgba(93,53,231,0.9)\", \"rgba(80,200,120,0.9)\"],\n            fill: [\n                [\"rgba(178,207,231,0.3)\", \"transparent\"],\n                [\"rgba(178,83,231,0.3)\", \"transparent\"],\n                [\"rgba(93,53,231,0.3)\", \"transparent\"],\n                [\"rgba(80,200,120,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#2A5DA1\", \"#B253E7\", \"#5D35E7\", \"#50C878\"],\n            strokeColor: [\"rgba(178,207,231,0.9)\", \"rgba(178,83,231,0.9)\", \"rgba(93,53,231,0.9)\", \"rgba(80,200,120,0.9)\"],\n        },\n        blockInfo: {\n            window: { color: \"#101728\", },\n            title: { color: \"#C2C7D5\", },\n            group: { color: \"#BBBFCD\", },\n        },\n    },\n    {\n        canvas: { background: \"#FFFFFF\", },\n        title: { color: \"#2E2F35\", },\n        legend: { color: \"#484A53\", },\n        axis: { title: { color: \"#2E2F35\", }, point: { color: \"#484A53\", }, },\n        grid: { color: \"#EAEAEA\", },\n        line: {\n            color: [\"#82C970\", \"#A5FF8E\", \"#00FF0C\", \"#00800C\"],\n            fill: [\n                [\"rgba(130,201,112,0.3)\", \"transparent\"],\n                [\"rgba(165,255,142,0.3)\", \"transparent\"],\n                [\"rgba(0,255,12,0.3)\", \"transparent\"],\n                [\"rgba(0,128,12,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#82C970\", \"#A5FF8E\", \"#00FF0C\", \"#00800C\"],\n            strokeColor: [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"],\n        },\n        blockInfo: {\n            window: { color: \"#000000\", },\n            title: { color: \"#FDFDFD\", },\n            group: { color: \"#D3D3D3\", },\n        },\n    },\n    {\n        canvas: { background: \"#F4F5F7\", },\n        title: { color: \"#2E2F35\", },\n        legend: { color: \"#484A53\", },\n        axis: { title: { color: \"#2E2F35\", }, point: { color: \"#484A53\", }, },\n        grid: { color: \"#D2D3D5\", },\n        line: {\n            color: [\"#E49BF7\", \"#4B4F9A\", \"#69D8F4\", \"#F9C366\"],\n            fill: [\n                [\"rgba(228,155,247,0.3)\", \"transparent\"],\n                [\"rgba(75,79,154,0.3)\", \"transparent\"],\n                [\"rgba(105,216,244,0.3)\", \"transparent\"],\n                [\"rgba(249,195,102,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#F4F5F7\", \"#F4F5F7\", \"#F4F5F7\", \"#F4F5F7\"],\n            strokeColor: [\"#E49BF7\", \"#4B4F9A\", \"#69D8F4\", \"#F9C366\"],\n        },\n        blockInfo: {\n            window: { color: \"#000000\", },\n            title: { color: \"#FDFDFD\", },\n            group: { color: \"#D3D3D3\", },\n        },\n    },\n    {\n        canvas: { background: \"#FFFFFF\", },\n        title: { color: \"#2E2F35\", },\n        legend: { color: \"#484A53\", },\n        axis: { title: { color: \"#2E2F35\", }, point: { color: \"#484A53\", }, },\n        grid: { color: \"#D2D3D5\", },\n        line: {\n            color: [\"#F44133\", \"#9370EE\", \"#39DBFF\", \"#3E51EB\"],\n            fill: [\n                [\"rgba(244,65,51,0.3)\", \"transparent\"],\n                [\"rgba(147,112,238,0.3)\", \"transparent\"],\n                [\"rgba(57,219,255,0.3)\", \"transparent\"],\n                [\"rgba(62,81,235,0.3)\", \"transparent\"]\n            ],\n        },\n        cap: {\n            color: [\"#F44133\", \"#9370EE\", \"#39DBFF\", \"#3E51EB\"],\n            strokeColor: [],\n        },\n        blockInfo: {\n            window: { color: \"#383838\", },\n            title: { color: \"#FDFDFD\", },\n            group: { color: \"#D3D3D3\", },\n        },\n    },\n    {\n        canvas: { background: \"#FEFEFE\", },\n        title: { color: \"#2E2F35\", },\n        legend: { color: \"#484A53\", },\n        axis: { title: { color: \"#2E2F35\", }, point: { color: \"#484A53\", }, },\n        grid: { color: \"#D0D0D0\", },\n        line: {\n            color: [\"rgba(0,156,228,0.7)\", \"rgba(224,1,53,0.9)\", \"rgba(21,212,0,0.9)\"],\n            fill: [\n                [\"rgba(0,156,228,0.3)\", \"transparent\"],\n                [\"rgba(224,1,53,0.3)\", \"transparent\"],\n                [\"rgba(21,212,0,0.3)\", \"transparent\"]\n            ],\n        },\n        blockInfo: {\n            window: { color: \"#E7E7E7\", },\n            title: { color: \"#2E2F35\", },\n            group: { color: \"#484A53\", },\n        },\n    }\n]);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/Utils/themes/light.ts?");

/***/ }),

/***/ "./src/ts/helpers/getRGB.ts":
/*!**********************************!*\
  !*** ./src/ts/helpers/getRGB.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Преобразует rgba строку\n * @param {string} rgb rgb параметры (\"255,255,255\")\n * @param {number} opacity Прозрачность цвета (от 0 до 1)\n * @return {string} rgba строка\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((rgb, opacity = 1) => `rgba(${rgb},${opacity})`);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/getRGB.ts?");

/***/ }),

/***/ "./src/ts/helpers/getRange.ts":
/*!************************************!*\
  !*** ./src/ts/helpers/getRange.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Определяет диапазон значений от меньшего к большему в зависимости от шага\n * @param {number} from Начальное значение (наименьшее)\n * @param {number} to Конечное значение (наибольшее)\n * @param {number} count Шаг\n * @return {Array<number>} Диапазон\n *\n * Отдельная благодарность\n * @see http://www.robertpenner.com/easing/\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((from, to, count) => {\n    const range = [];\n    if (from === 0 && Math.abs(to) === 1) {\n        let step = 0;\n        for (let i = 0; i < count; i++) {\n            step = ((from * i) + (to * (count - i))) / count;\n        }\n        for (let j = from; j <= to; j += step) {\n            range.push(j);\n        }\n    }\n    else {\n        const step = (to - from) / (count - 1);\n        for (let i = from; i <= to; i += step) {\n            range.push(Math.ceil(i));\n        }\n    }\n    return range;\n});\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/getRange.ts?");

/***/ }),

/***/ "./src/ts/helpers/getStyleByIndex.ts":
/*!*******************************************!*\
  !*** ./src/ts/helpers/getStyleByIndex.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n* Определяет стиль для элемента с индексом, который больше длины массива стилей\n* @param {Array<string | string[]>} res Содержит стили, последний из которых будет применен к элементу\n* @param {number} idx Индекс элемента\n* @param {Array<string | string[]>} styles Содержит массив стилей\n* @returns {Array<string | string[]> | string}\n*/\nfunction getStyleByBigIndex(res, idx, styles) {\n    const arr = res;\n    if (arr.length - 1 >= idx) {\n        return arr[idx];\n    }\n    for (let i = 0; i < styles.length; i++) {\n        if (arr.length - 1 >= idx) {\n            break;\n        }\n        arr.push(styles[i]);\n    }\n    return getStyleByBigIndex(arr, idx, styles);\n}\n/**\n * Определяет элемент темы\n * @param {number} idx Индекс текущего элемента, к которому будет применяться стиль\n * @param {array} styles Содержит элементы, содержащие стили\n * @return {string}\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((idx, styles = []) => {\n    if (!styles.length) {\n        return \"\";\n    }\n    if (idx > styles.length - 1) {\n        return getStyleByBigIndex([], idx, styles);\n    }\n    return styles[idx] || \"\";\n});\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/getStyleByIndex.ts?");

/***/ }),

/***/ "./src/ts/helpers/getTextSize.ts":
/*!***************************************!*\
  !*** ./src/ts/helpers/getTextSize.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ui_elements_Text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/elements/Text */ \"./src/ts/ui/elements/Text.ts\");\n\n/**\n * Определяет размеры текста\n * @param {number} size Размер шрифта\n * @param {number} weight Жирность шрифта\n * @param {string} text Текст\n * @param {CanvasRenderingContext2D} ctx Контекст элемента canvas\n * @return {object} Размеры текста ({ width, height })\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((size, weight, text, ctx) => {\n    const font = {\n        size,\n        str: `${weight} ${size}px Arial, sans-serif`,\n        text,\n    };\n    return new _ui_elements_Text__WEBPACK_IMPORTED_MODULE_0__[\"default\"](font, ctx).getSizes();\n});\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/getTextSize.ts?");

/***/ }),

/***/ "./src/ts/helpers/getTextStr.ts":
/*!**************************************!*\
  !*** ./src/ts/helpers/getTextStr.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Определяет строку с данными шрифта\n * @param {number} size\n * @param {number} weight\n * @param {string}\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((size, weight) => `${weight} ${size}px Arial, sans-serif`);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/getTextStr.ts?");

/***/ }),

/***/ "./src/ts/helpers/isNumber.ts":
/*!************************************!*\
  !*** ./src/ts/helpers/isNumber.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Проверяет тип данных на число\n * @param {any} data Данные\n * @return {boolean}\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((data) => typeof data === \"number\" && !isNaN(data));\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/isNumber.ts?");

/***/ }),

/***/ "./src/ts/helpers/quickSort.ts":
/*!*************************************!*\
  !*** ./src/ts/helpers/quickSort.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Быстрая сортировка массива\n * @param {Array<number | object>} arr Содержит значений\n * @param {string} key Ключ, по значению которого нужно сортировать\n * @returns {Array<number | object>} Отсортированный массив\n */\nfunction quickSort(arr, key) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const lastValue = arr[arr.length - 1];\n    const leftSide = [];\n    const rightSide = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (key ? arr[i][key] < lastValue[key] : arr[i] < lastValue) {\n            leftSide.push(arr[i]);\n        }\n        else {\n            rightSide.push(arr[i]);\n        }\n    }\n    return [...quickSort(leftSide, key), lastValue, ...quickSort(rightSide, key)];\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (quickSort);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/quickSort.ts?");

/***/ }),

/***/ "./src/ts/helpers/setGradientColor.ts":
/*!********************************************!*\
  !*** ./src/ts/helpers/setGradientColor.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _getRange__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getRange */ \"./src/ts/helpers/getRange.ts\");\n\n/**\n * Устанавливает градиент фигуре/линии\n * @param {Array<string>} color Содержит цвета\n * @param {number} startY Начальная позиция по оси ординат\n * @param {number} endY Конечная позиция по оси ординат\n * @param {string} propertyToStyle Свойство, к которому нужно применять градиент\n * @param {CanvasRenderingContext2D} ctx Контекст элемента canvas\n * @param {number} startX Начальная позиция по оси абсцисс\n * @param {number} endX Конечная позиция по оси абсцисс\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((colors, startY, endY, propertyToStyle, ctx, startX = 0, endX = 0) => {\n    const grd = ctx.createLinearGradient(startX, startY, endX, endY);\n    const range = (0,_getRange__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(0, 1, colors.length - 1);\n    // Создает градиент\n    colors.map((clr, idx) => grd.addColorStop(range[idx], clr));\n    ctx[propertyToStyle] = grd;\n});\n\n\n//# sourceURL=webpack://ACharty/./src/ts/helpers/setGradientColor.ts?");

/***/ }),

/***/ "./src/ts/ui/Canvas.ts":
/*!*****************************!*\
  !*** ./src/ts/ui/Canvas.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _elements_Rect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elements/Rect */ \"./src/ts/ui/elements/Rect.ts\");\n\nclass Canvas {\n    constructor(selector, background, theme = {}) {\n        // HTML элемент canvas\n        this.canvasElement = document.querySelector(selector);\n        // Задний фон canvas\n        this.background = background;\n        // Контекст элемента canvas\n        this.ctx = this.canvasElement.getContext(\"2d\");\n        // Содержит данные темы\n        this.theme = theme;\n    }\n    /**\n     * Устанавливает начальные стили холсту\n     * @private\n     */\n    _setDefaultStyles() {\n        const { offsetWidth, offsetHeight, } = this.canvasElement;\n        const defaultStyles = {\n            display: \"block\",\n            boxSizing: \"border-box\",\n        };\n        this.canvasElement.width = offsetWidth;\n        this.canvasElement.height = offsetHeight;\n        this.canvasElement.setAttribute(\"style\", Object.keys(defaultStyles)\n            .map((key) => `${key}:${defaultStyles[key]}`)\n            .join(\";\"));\n    }\n    /**\n     * Получает размеры элемента canvas\n     * @returns {ISize} Ширина и высота элемента canvas\n     */\n    getSizes() {\n        const { width, height, } = this.canvasElement;\n        return {\n            width,\n            height,\n        };\n    }\n    /**\n     * Устанавливает задний фон холсту\n     * @private\n     */\n    _setBackground() {\n        const background = this.background || this.theme.background;\n        const { width, height, } = this.getSizes();\n        new _elements_Rect__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0, background, this.ctx, width, height, 0, height).draw();\n    }\n    /**\n     * Рисует начальный холст\n     * @returns {ICanvasClass} Экземпляр класса Canvas\n     */\n    init() {\n        this._setDefaultStyles();\n        this._setBackground();\n        return this;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Canvas);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/Canvas.ts?");

/***/ }),

/***/ "./src/ts/ui/Grid.ts":
/*!***************************!*\
  !*** ./src/ts/ui/Grid.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _elements_CustomFigure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elements/CustomFigure */ \"./src/ts/ui/elements/CustomFigure.ts\");\n/* harmony import */ var _elements_Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elements/Line */ \"./src/ts/ui/elements/Line.ts\");\n\n\nclass Grid {\n    constructor(ctx, names, maxPointYWidth, axisY, axisX, background, format, line = {}, theme = {}) {\n        // Содержит максимальную ширину текста точки оси ординат\n        this.maxPointYWidth = maxPointYWidth;\n        // Содержит названия точек оси абсцисс\n        this.names = names;\n        // Контекст элемента canvas\n        this.ctx = ctx;\n        // Содержит точки оси ординат\n        this.pointsY = axisY.points;\n        // Содержит точки оси абсцисс\n        this.pointsX = axisX.points;\n        // Правило, говорящее, что точки на оси абсцисс будут отрисованы\n        this.showPointsX = axisX.font.showText;\n        // Правило, говорящее, что точки на оси ординат будут отрисованы\n        this.showPointsY = axisY.font.showText;\n        // Содержит данные линии\n        this.line = line;\n        // Формат сетки (horizontal или vertical)\n        this.format = format || \"default\";\n        // Данные темы\n        this.theme = theme;\n        // Задний фон сетки\n        this.background = background;\n        // Дистанция между линией сетки и точкой оси\n        this.distanceBetweenLineAndPoint = 5;\n    }\n    /**\n     * Определяет точки, которые видны на диаграмме\n     * @param {Array<IPointX | IPointY>} points Содержит точки оси\n     * @private\n     * @returns {Array<IPointX | IPointY>}\n     */\n    _getPointsOnScreen(points) {\n        return points.filter(({ onScreen, }) => onScreen);\n    }\n    /**\n     * Рисует задний фон сетке\n     * @private\n     */\n    _drawBackground() {\n        if (!this.background) {\n            return;\n        }\n        const pointsYOnScreen = this._getPointsOnScreen(this.pointsY);\n        const pointsXOnScreen = this._getPointsOnScreen(this.pointsX);\n        const { x: startX, } = pointsXOnScreen[0];\n        const { y: startY, } = pointsYOnScreen[0];\n        const { x: endX, } = pointsXOnScreen[pointsXOnScreen.length - 1];\n        const { y: endY, } = pointsYOnScreen[pointsYOnScreen.length - 1];\n        new _elements_CustomFigure__WEBPACK_IMPORTED_MODULE_0__[\"default\"](startX, startY, this.background, this.ctx, [\n            { x: endX, y: startY, },\n            { x: endX, y: endY, },\n            { x: startX, y: endY, },\n            { x: startX, y: startY, }\n        ], startY, endY).draw();\n    }\n    /**\n     * Рисует горизонтальные линии\n     * @private\n     * @param {string | Array<string>} color Цвет линии\n     */\n    _drawHorizontalLines(color) {\n        const { width, dotted, stretch, } = this.line;\n        const pointsYOnScreen = this._getPointsOnScreen(this.pointsY);\n        const { x: startX, } = this.pointsX[0];\n        const { x: endX, } = this.pointsX[this.pointsX.length - 1];\n        const useStretch = stretch && this.showPointsY;\n        // Рисуем линии\n        pointsYOnScreen.map(({ y, x, }) => {\n            new _elements_Line__WEBPACK_IMPORTED_MODULE_1__[\"default\"](useStretch ? (x + this.maxPointYWidth + this.distanceBetweenLineAndPoint) : startX, y, color, this.ctx, [{ x: endX, y, }], width, dotted).draw();\n        });\n    }\n    /**\n     * Рисует вертикальные линии\n     * @private\n     * @param {string | Array<string>} color Цвет линии\n     */\n    _drawVerticalLines(color) {\n        const { width, dotted, stretch, } = this.line;\n        const axisYOnScreen = this._getPointsOnScreen(this.pointsY);\n        const axisXOnScreen = this._getPointsOnScreen(this.pointsX);\n        const { y: startY, } = axisYOnScreen[0];\n        const { y: endYPointX, } = axisXOnScreen[axisXOnScreen.length - 1];\n        const { y: endYPointY, } = axisYOnScreen[axisYOnScreen.length - 1];\n        // Рисуем линии\n        this.names.map((name) => {\n            const { x, height, } = this.pointsX.find((axisXDataItem) => axisXDataItem.name === name);\n            const isOnScreen = Boolean(axisXOnScreen.find((point) => point.name === name));\n            const useStretch = stretch && isOnScreen && this.showPointsX;\n            new _elements_Line__WEBPACK_IMPORTED_MODULE_1__[\"default\"](x, startY, color, this.ctx, [{ x, y: useStretch ? endYPointX - (height + this.distanceBetweenLineAndPoint) : endYPointY, }], width, dotted).draw();\n        });\n    }\n    // Рисует сетку\n    init() {\n        if (!Object.keys(this.line).length) {\n            return;\n        }\n        this._drawBackground();\n        const colorLine = this.line.color || this.theme.color;\n        switch (this.format) {\n            case \"horizontal\":\n                this._drawHorizontalLines(colorLine);\n                break;\n            case \"vertical\":\n                this._drawVerticalLines(colorLine);\n                break;\n            default:\n                this._drawVerticalLines(colorLine);\n                this._drawHorizontalLines(colorLine);\n        }\n        return this;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Grid);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/Grid.ts?");

/***/ }),

/***/ "./src/ts/ui/Legend.ts":
/*!*****************************!*\
  !*** ./src/ts/ui/Legend.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _elements_Text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elements/Text */ \"./src/ts/ui/elements/Text.ts\");\n/* harmony import */ var _elements_Circle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elements/Circle */ \"./src/ts/ui/elements/Circle.ts\");\n/* harmony import */ var _elements_Line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elements/Line */ \"./src/ts/ui/elements/Line.ts\");\n/* harmony import */ var _helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/getTextSize */ \"./src/ts/helpers/getTextSize.ts\");\n/* harmony import */ var _helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/getStyleByIndex */ \"./src/ts/helpers/getStyleByIndex.ts\");\n/* harmony import */ var _helpers_getTextStr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/getTextStr */ \"./src/ts/helpers/getTextStr.ts\");\n\n\n\n\n\n\nclass Legend {\n    constructor(showLegend, data, line, ctx, bounds, font, circle, hideGroups, legendGaps = {}, maxCount = 4, themeForText = {}, themeForCircle = {}) {\n        // Содержит названия скрытых групп\n        this.hideGroups = hideGroups;\n        // Если включено, то легенда будет нарисована\n        this.showLegend = showLegend;\n        // Данные линии\n        this.line = line;\n        // Данные шрифта\n        this.font = font;\n        // Содержит данные групп\n        this.data = data;\n        // Контекст элемента canvas\n        this.ctx = ctx;\n        // Содержит объект границ диаграммы\n        this.bounds = bounds;\n        // Данные круга\n        this.circle = circle;\n        // Максимальное кол-во элементов в одной колонке\n        this.maxCount = maxCount > 0 ? maxCount : 4;\n        // Отступы\n        this.legendGaps = legendGaps;\n        // Высота легенды\n        this.totalHeight = 0;\n        // Стили для текста от темы\n        this.themeForText = themeForText;\n        // Стили для круга от темы\n        this.themeForCircle = themeForCircle;\n        // Содержит данные элементов легенды\n        this.items = [];\n    }\n    /**\n     * Определяет размеры у текста групп\n     * @param {Array<IColumnLegend>} groups Содержит группы\n     * @private\n     * @returns {Array<IItemLegend>} Группы с их размером текста\n     */\n    _getSizeGroups(groups) {\n        const { size, weight = 400, } = this.font;\n        return groups.map((groupItem) => {\n            const sizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(size, weight, groupItem.group, this.ctx);\n            return Object.assign(Object.assign(Object.assign({}, sizes), groupItem), { x: null, y: null });\n        });\n    }\n    /**\n     * Определяет дистанцию между группами по горизонтали\n     * @param {Array<IItemLegend>} groups Содержит группы\n     * @private\n     * @returns {number} Общая дистанция\n     */\n    _getDistanceGroups(groups) {\n        if (!groups.length) {\n            return 0;\n        }\n        const { group: gapsGroup = {}, circle: gapsCircle = { right: null, }, } = this.legendGaps;\n        const { radius, } = this.circle;\n        return groups.reduce((acc, { width, }) => {\n            acc += width + (gapsGroup.right || 0) + radius * 2 + (gapsCircle.right || 0);\n            return acc;\n        }, 0);\n    }\n    /**\n     * Определяет дистанцию между группами по вертикали\n     * @param {Array<IItemLegend>} groups Содержит группы\n     * @private\n     * @returns {number} Общая дистанция\n     */\n    _getTopDistanceGroups(groups) {\n        if (!groups.length) {\n            return 0;\n        }\n        const { group: gapsGroup = {}, } = this.legendGaps;\n        const { height, } = groups[0];\n        return (gapsGroup.bottom || 0) + height;\n    }\n    /**\n     * Определяет колонки относительно текущих групп\n     * @private\n     * @returns {Array<IColumnLegend[]>} Колонки\n     */\n    _getColumns() {\n        const columns = [];\n        const dataKeys = Object.keys(this.data);\n        for (let i = 0; i < dataKeys.length; i += this.maxCount) {\n            const column = dataKeys\n                .map((group) => (Object.assign(Object.assign({}, this.data[group]), { group })))\n                .slice(i, i + this.maxCount)\n                .map(({ group, line = {}, }) => {\n                const idx = dataKeys.indexOf(group);\n                const colorByTheme = (0,_helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(idx, this.themeForCircle.color);\n                const colorLine = (line.color || (this.line || {}).color || line.fill || (this.line || {}).fill) || colorByTheme;\n                return {\n                    group,\n                    color: colorLine,\n                };\n            });\n            columns.push(column);\n        }\n        return columns;\n    }\n    /**\n     * Рисует текст группы\n     * @param {string} group Содержит текст группы\n     * @param {number} width Ширина текста группы\n     * @param {number} height Высота текста группы\n     * @param {Array<IItemLegend>} groups Содержит группы\n     * @param {number} index Индекс группы\n     * @param {IGapsForTextLegend} gaps Отступы\n     * @private\n     * @returns {IPos} Позиция текста\n     */\n    _drawText(group, width, height, groups, index, gaps) {\n        const bounds = this.bounds;\n        const center = bounds.width / 2;\n        const totalGroupsDistance = this._getDistanceGroups(groups);\n        const { size, weight = 400, color = this.themeForText.color, } = this.font;\n        const font = {\n            size,\n            color,\n            str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(size, weight),\n            text: group,\n        };\n        const prevGroups = groups.filter((grp, idx) => idx < index);\n        const posGroup = {\n            x: bounds.horizontal.start + (gaps.left || 0) + center - totalGroupsDistance / 2 + this._getDistanceGroups(prevGroups),\n            y: bounds.vertical.start + (gaps.top || 0) + height,\n        };\n        new _elements_Text__WEBPACK_IMPORTED_MODULE_0__[\"default\"](font, this.ctx, posGroup.x, posGroup.y).draw();\n        if (this.hideGroups.includes(group)) {\n            const endX = width + posGroup.x;\n            const y = posGroup.y - height / 2;\n            new _elements_Line__WEBPACK_IMPORTED_MODULE_2__[\"default\"](posGroup.x, y, color, this.ctx, [{ x: endX, y, }], 2).draw();\n        }\n        return posGroup;\n    }\n    /**\n     * Рисует круг\n     * @param {number} x Позиция по оси абсцисс\n     * @param {number} y Позиция по оси ординат\n     * @param {number} height Высота\n     * @param {string} color Цвет\n     * @private\n     */\n    _drawCircle(x, y, height, color) {\n        const { radius, } = this.circle;\n        const { circle = { right: null, }, } = this.legendGaps;\n        const posCircle = {\n            x: x - radius - (circle.right || 0),\n            y: y - Math.max(radius, height / 2),\n        };\n        new _elements_Circle__WEBPACK_IMPORTED_MODULE_1__[\"default\"](radius, posCircle.x, posCircle.y, color, this.ctx, 1, posCircle.y - radius, posCircle.y + radius).draw();\n    }\n    /**\n     * Получает дистанцию между предыдущих колонок и текущей колонкой\n     * @param {Array<IColumnLegend[]>} columns Содержит данные колонок\n     * @param {number} index Индекс текущей колонки\n     * @private\n     * @returns {number} Дистанция\n     */\n    _getDistanceTopFromPrevColumns(columns, index) {\n        const prevColumns = columns.filter((c, i) => i < index);\n        return prevColumns.reduce((acc, prevColumn) => {\n            acc += this._getTopDistanceGroups(this._getSizeGroups(prevColumn));\n            return acc;\n        }, 0);\n    }\n    /**\n     * Рисует легенду\n     * @param {IGapsForLegend} gaps Содержит отступы легенды\n     * @returns {ILegendClass}\n     */\n    draw(gaps) {\n        if (!this.showLegend) {\n            return this;\n        }\n        const columns = this._getColumns();\n        columns.map((groups, idx) => {\n            const updateGroups = this._getSizeGroups(groups);\n            const gapFromPrevColumns = this._getDistanceTopFromPrevColumns(columns, idx);\n            updateGroups.map(({ group, color: colorCap, height, width, }, index) => {\n                const posGroup = this._drawText(group, width, height, updateGroups, index, Object.assign(Object.assign({}, gaps), { top: gaps.top + gapFromPrevColumns }));\n                this.items.push(Object.assign(Object.assign({ group }, posGroup), { height, width, color: colorCap }));\n                this._drawCircle(posGroup.x, posGroup.y, height, colorCap);\n            });\n            this.totalHeight += this._getTopDistanceGroups(updateGroups);\n        });\n        return this;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Legend);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/Legend.ts?");

/***/ }),

/***/ "./src/ts/ui/axis/Axis.ts":
/*!********************************!*\
  !*** ./src/ts/ui/axis/Axis.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_quickSort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers/quickSort */ \"./src/ts/helpers/quickSort.ts\");\n\nclass Axis {\n    constructor(ctx, sortNames, themeForPoint = {}, themeForTitle = {}, title = {}, bounds = {}, font = {}) {\n        // Контекст элемента canvas\n        this.ctx = ctx;\n        // Содержит входные данные заголовка оси\n        this.title = title;\n        // Стили шрифта оси\n        this.font = font;\n        // Содержит границы холста\n        this.bounds = bounds;\n        // Содержит данные точек, находящихся на этой оси\n        this.points = [];\n        // Тип сортировки точек (\"less-more\" или \"more-less\")\n        this.sortNames = sortNames || \"less-more\";\n        // Содержит уникальные названия точек оси абсцисс\n        this.uniqueNames = [];\n        // Содержит уникальные значения точек оси ординат\n        this.uniqueValues = [];\n        // Дистанция между осью абсцисс и графиком\n        this.gapTopAxisX = 10;\n        // Дистанция между осью ординат и графиком\n        this.gapRightAxisY = 10;\n        // Стили для точек от темы\n        this.themeForPoint = themeForPoint;\n        // Стили для заголовка от темы\n        this.themeForTitle = themeForTitle;\n    }\n    /**\n     * Сортирует значения и названия (если те имеют тип данных число) групп\n     * @param {IData} data Содержит данные групп\n     * @returns {IAxesData}\n     */\n    getAxesData(data) {\n        // Для оси ординат\n        const values = [];\n        // Для оси абсцисс\n        const names = [];\n        // Добавляем значения и названия в массивы данных осей\n        for (const group in data) {\n            const groupData = data[group].data;\n            names.push(...groupData.map(({ name, }) => name));\n            values.push(...groupData.map(({ value, }) => value));\n        }\n        const uniqueNames = [...new Set(names)];\n        const uniqueValues = [...new Set(values)];\n        const namesIsNumbers = !uniqueNames.some((name) => isNaN(+name));\n        const sortedValues = (0,_helpers_quickSort__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uniqueValues).reverse();\n        const sortedNames = [];\n        if (namesIsNumbers) {\n            switch (this.sortNames) {\n                case \"less-more\":\n                    sortedNames.push(...(0,_helpers_quickSort__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uniqueNames));\n                    break;\n                case \"more-less\":\n                    sortedNames.push(...(0,_helpers_quickSort__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uniqueNames).reverse());\n                    break;\n            }\n        }\n        return {\n            values: sortedValues,\n            names: namesIsNumbers ? sortedNames : uniqueNames,\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Axis);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/axis/Axis.ts?");

/***/ }),

/***/ "./src/ts/ui/axis/AxisX.ts":
/*!*********************************!*\
  !*** ./src/ts/ui/axis/AxisX.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Axis */ \"./src/ts/ui/axis/Axis.ts\");\n/* harmony import */ var _elements_Text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../elements/Text */ \"./src/ts/ui/elements/Text.ts\");\n/* harmony import */ var _helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/getTextSize */ \"./src/ts/helpers/getTextSize.ts\");\n/* harmony import */ var _helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/getStyleByIndex */ \"./src/ts/helpers/getStyleByIndex.ts\");\n/* harmony import */ var _helpers_getTextStr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers/getTextStr */ \"./src/ts/helpers/getTextStr.ts\");\n\n\n\n\n\nclass AxisX extends _Axis__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(ctx, data, line, title, bounds, font, editName, sortNames, rotate, themeForTitle, themeForPoint, ignoreNames, themeForLine = {}) {\n        super(ctx, sortNames, themeForPoint, themeForTitle, title, bounds, font);\n        // Правило, при котором текст точек оси абсцисс будет повернут на 90 градусов\n        this.rotate = rotate;\n        // Стили для линии от темы\n        this.themeForLine = themeForLine;\n        /**\n         * Содержит названия точек оси абсцисс, которые не будут нарисованы на диаграмме\n         * Может быть функцией или массивом\n         */\n        this.ignoreNames = ignoreNames || [];\n        // Содержит данные групп\n        this.data = data;\n        // Метод, позволяющий изменить название точки оси абсцисс\n        this.editName = editName;\n        // Данные линии\n        this.line = line;\n        // Содержит дополнительные данные заголовка\n        this.titleData = {\n            x: null,\n            y: null,\n            width: null,\n            height: null,\n            font: {\n                text: \"\",\n                size: null,\n                color: \"\",\n                weight: null,\n            },\n            gapTop: null,\n        };\n    }\n    /**\n     * Отбирает названия точек оси абсцисс, которые не будут нарисованы на диаграмме\n     * @returns {Array<string | number>} Названия точек\n     */\n    getIgnoreNames() {\n        if (this.ignoreNames instanceof Function) {\n            return this.getAxesData(this.data).names.filter(this.ignoreNames);\n        }\n        if (Array.isArray(this.ignoreNames)) {\n            return this.ignoreNames;\n        }\n        return [];\n    }\n    /**\n     * Рисует заголовок на оси абсцисс\n     * @param {IGapsForXTitle} gaps Отступы заголовка\n     * @returns {IAxisXClassAxisX}\n     */\n    drawTitle(gaps) {\n        if (!Object.keys(this.title).length) {\n            return this;\n        }\n        const { size, weight = 600, color = this.themeForTitle.color, text, } = this.title.font;\n        const font = {\n            size,\n            color,\n            text,\n            weight,\n            str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(size, weight),\n        };\n        const bounds = this.bounds;\n        const sizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, text, this.ctx);\n        const startX = bounds.horizontal.start + (gaps.left || 0);\n        const endX = bounds.horizontal.end - sizes.width;\n        const posTitle = {\n            x: startX + (endX - startX) / 2,\n            y: bounds.vertical.end,\n        };\n        new _elements_Text__WEBPACK_IMPORTED_MODULE_1__[\"default\"](font, this.ctx, posTitle.x, posTitle.y).draw();\n        this.titleData = Object.assign(Object.assign(Object.assign({}, this.title), sizes), posTitle);\n        return this;\n    }\n    /**\n     * Определяет название точки на оси абсцисс\n     * @param {string | number} name Название точки\n     * @private\n     * @returns {string | number} Корректное название точки\n     */\n    getCorrectName(name) {\n        return this.editName instanceof Function ? this.editName(name) : name;\n    }\n    /**\n     * Рисует точки на оси абсцисс\n     * @param {IGapsForXPointsobject} gaps Отступы оси абсцисс\n     * @returns {IAxisXClass}\n     */\n    drawPoints(gaps) {\n        const names = this.getAxesData(this.data).names;\n        const bounds = this.bounds;\n        const ignoreNames = this.getIgnoreNames();\n        const { size, weight = 400, showText = Boolean(Object.keys(this.font).length), color = this.themeForPoint.color, } = this.font;\n        names.map((name, index) => {\n            // Начальная точка для отрисовки элементов\n            const startPoint = bounds.horizontal.start + (gaps.left || 0);\n            // Конечная точка для отрисовки элементов\n            const endPoint = bounds.horizontal.end - (gaps.right || 0) - startPoint;\n            // Шаг, с которым отрисовываем элементы\n            const step = endPoint / (names.length - 1);\n            // Содержит размеры названия точки\n            const nameSizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, `${this.getCorrectName(name)}`, this.ctx);\n            // Координаты элемента для отрисовки\n            const posXItem = {\n                x: step * index + startPoint,\n                y: bounds.vertical.end - (gaps.bottom || 0),\n            };\n            // Если это уникальное название присутствует в какой-либо группе,\n            // то мы добавляем его вместе с его значением\n            for (const group in this.data) {\n                const groupData = this.data[group].data;\n                const dataKeys = Object.keys(this.data);\n                const idx = dataKeys.indexOf(group);\n                const colorByTheme = (0,_helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(idx, this.themeForLine.color);\n                groupData.map((groupDataItem) => {\n                    if (groupDataItem.name === name) {\n                        const groupLine = (this.data[group].line || {});\n                        this.points.push(Object.assign(Object.assign({ onScreen: !ignoreNames.includes(name), name, color: (groupLine.color || (this.line || {}).color || groupLine.fill || (this.line || {}).fill) || colorByTheme, value: groupDataItem.value, group }, posXItem), nameSizes));\n                    }\n                });\n            }\n            // Рисуем текст\n            if (showText && !ignoreNames.includes(name)) {\n                const font = Object.assign(Object.assign({}, this.font), { color, str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(size, weight), text: this.getCorrectName(name).toString() });\n                if (this.rotate) {\n                    new _elements_Text__WEBPACK_IMPORTED_MODULE_1__[\"default\"](font, this.ctx, posXItem.x + nameSizes.height / 2, posXItem.y, null, -90 * (Math.PI / 180)).draw();\n                }\n                else {\n                    new _elements_Text__WEBPACK_IMPORTED_MODULE_1__[\"default\"](font, this.ctx, posXItem.x - nameSizes.width / 2, posXItem.y).draw();\n                }\n            }\n        });\n        this.font.showText = showText;\n        return this;\n    }\n    /**\n     * Определяет наибольшую ширину текста среди точек оси абсцисс\n     * @returns {number}\n     */\n    getMaxWidthTextPoint() {\n        const names = this.getAxesData(this.data).names;\n        const { size, weight = 400, } = this.font;\n        const widths = names.map((name) => (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, `${this.getCorrectName(name)}`, this.ctx).width);\n        return Math.max(...widths);\n    }\n    /**\n     * Определяет наибольшую ширину текста среди точек оси абсцисс\n     * @returns {number}\n     */\n    getMaxHeightTextPoint() {\n        const names = this.getAxesData(this.data).names;\n        const { size, weight = 400, } = this.font;\n        const heights = names.map((name) => (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, `${this.getCorrectName(name)}`, this.ctx).height);\n        return Math.max(...heights);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxisX);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/axis/AxisX.ts?");

/***/ }),

/***/ "./src/ts/ui/axis/AxisY.ts":
/*!*********************************!*\
  !*** ./src/ts/ui/axis/AxisY.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Axis */ \"./src/ts/ui/axis/Axis.ts\");\n/* harmony import */ var _elements_Text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../elements/Text */ \"./src/ts/ui/elements/Text.ts\");\n/* harmony import */ var _helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/getTextSize */ \"./src/ts/helpers/getTextSize.ts\");\n/* harmony import */ var _helpers_getRange__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/getRange */ \"./src/ts/helpers/getRange.ts\");\n/* harmony import */ var _helpers_quickSort__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers/quickSort */ \"./src/ts/helpers/quickSort.ts\");\n/* harmony import */ var _helpers_getTextStr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../helpers/getTextStr */ \"./src/ts/helpers/getTextStr.ts\");\n\n\n\n\n\n\nclass AxisY extends _Axis__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(editValue, data, ctx, title, bounds, font, sortNames, themeForTitle, themeForPoint, sortValues, step = 3) {\n        super(ctx, sortNames, themeForPoint, themeForTitle, title, bounds, font);\n        // Шаг, с которым будут рисоваться значения на оси ординат\n        this.step = step;\n        // Метод, который позволяет изменить вид значения на оси ординат\n        this.editValue = editValue;\n        // Содержит данные групп\n        this.data = data;\n        // Тип сортировки точек оси ординат\n        this.sortValues = sortValues || \"less-more\";\n        // Содержит дополнительные данные заголовка оси ординат\n        this.titleData = {\n            x: null,\n            y: null,\n            width: null,\n            height: null,\n            font: {\n                text: \"\",\n                size: null,\n                color: \"\",\n                weight: null,\n            },\n            gapRight: null,\n        };\n    }\n    /**\n     * Определяет корректное значение точки на оси ординат\n     * @param {number} value Значение точки\n     * @private\n     * @returns {string | number} Корректное значение точки\n     */\n    _getCorrectValue(value) {\n        return this.editValue instanceof Function ? this.editValue(value) : value;\n    }\n    /**\n     * Рисует заголовок на оси ординат\n     * @param {IGapsForYTitle} gaps Отступы заголовка\n     * @returns {IAxisYClass}\n     */\n    drawTitle(gaps) {\n        if (!Object.keys(this.title).length) {\n            return this;\n        }\n        const bounds = this.bounds;\n        const { size, text, color = this.themeForTitle.color, weight = 600, } = this.title.font;\n        const font = {\n            size,\n            text,\n            color,\n            str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(size, weight),\n        };\n        const sizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, text, this.ctx);\n        const startY = bounds.vertical.start + sizes.width / 2 + (gaps.top || 0);\n        const endY = bounds.vertical.end - (gaps.bottom || 0);\n        const posTitle = {\n            x: bounds.horizontal.start + sizes.height,\n            y: startY + (endY - startY) / 2,\n        };\n        new _elements_Text__WEBPACK_IMPORTED_MODULE_1__[\"default\"](font, this.ctx, posTitle.x, posTitle.y, null, -90 * (Math.PI / 180)).draw();\n        this.titleData = Object.assign(Object.assign(Object.assign({}, this.title), sizes), posTitle);\n        return this;\n    }\n    /**\n     * Рисует точки на оси ординат\n     * @param {IGapsForYPoints} gaps Отступы оси ординат\n     * @returns {IAxisYClass}\n     */\n    drawPoints(gaps) {\n        const values = this.getAxesData(this.data).values;\n        const bounds = this.bounds;\n        const { size, showText = Boolean(Object.keys(this.font).length), weight = 400, color = this.themeForPoint.color, } = this.font;\n        const firstValue = Math.ceil(values[0]);\n        const lastValue = Math.floor(values[values.length - 1]);\n        const firstValueSizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, firstValue.toString(), this.ctx);\n        const range = (0,_helpers_getRange__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Math.min(firstValue, lastValue), Math.max(firstValue, lastValue), this.step);\n        const points = [];\n        switch (this.sortValues) {\n            case \"less-more\":\n                points.push(...range.reverse());\n                break;\n            case \"more-less\":\n                points.push(...range);\n                break;\n        }\n        if (!points.includes(lastValue)) {\n            points.push(lastValue);\n        }\n        points.map((value, index) => {\n            // Содержит размеры значения\n            const valueSizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, this._getCorrectValue(value).toString(), this.ctx);\n            // Начальная точка для отрисовки элементов\n            const startPoint = bounds.vertical.start + firstValueSizes.height / 2 + (gaps.top || 0);\n            // Конечная точка для отрисовки элементов\n            const endPoint = bounds.vertical.end - startPoint - (gaps.bottom || 0);\n            // Интервал для отрисовки элементов\n            const step = endPoint / (points.length - 1);\n            // Координаты для отрисовки элементов\n            const posYItem = {\n                x: bounds.horizontal.start + (gaps.left || 0),\n                y: step * index + startPoint,\n            };\n            const font = Object.assign(Object.assign({}, this.font), { color, str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(size, weight), text: this._getCorrectValue(value).toString() });\n            this.points.push(Object.assign(Object.assign({ onScreen: true, value }, valueSizes), posYItem));\n            // Отрисовываем значения\n            if (showText) {\n                new _elements_Text__WEBPACK_IMPORTED_MODULE_1__[\"default\"](font, this.ctx, posYItem.x, posYItem.y + valueSizes.height / 2).draw();\n            }\n        });\n        values.map((uValue) => {\n            const maxValue = (0,_helpers_quickSort__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.points, \"value\").find(({ value, }) => value >= uValue);\n            const minValue = (0,_helpers_quickSort__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.points, \"value\").reverse().find(({ value, }) => value <= uValue);\n            const textSizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight, uValue.toString(), this.ctx);\n            const posYItem = {\n                x: showText ? bounds.horizontal.start : 0,\n                y: minValue.y + (uValue - minValue.value) * ((maxValue.y - minValue.y) / ((maxValue.value - minValue.value) || 1)),\n            };\n            if (!this.points.find(({ value, }) => value === uValue)) {\n                this.points.push(Object.assign(Object.assign({ value: uValue, onScreen: false }, posYItem), textSizes));\n            }\n        });\n        this.font.showText = showText;\n        return this;\n    }\n    /**\n     * Определяет максимальную ширину среди всех значений оси ординат\n     * @returns {number} Максимальная ширина значения точки\n     */\n    getMaxTextWidthAtYAxis() {\n        return Math.max(...this.points.filter(({ onScreen, }) => onScreen).map(({ width, }) => width));\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxisY);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/axis/AxisY.ts?");

/***/ }),

/***/ "./src/ts/ui/chart/Chart.ts":
/*!**********************************!*\
  !*** ./src/ts/ui/chart/Chart.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _elements_Text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../elements/Text */ \"./src/ts/ui/elements/Text.ts\");\n/* harmony import */ var _helpers_isNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helpers/isNumber */ \"./src/ts/helpers/isNumber.ts\");\n/* harmony import */ var _helpers_getTextStr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/getTextStr */ \"./src/ts/helpers/getTextStr.ts\");\n/* harmony import */ var _helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/getTextSize */ \"./src/ts/helpers/getTextSize.ts\");\n\n\n\n\nclass Chart {\n    constructor(padding, data, ctx, width, height, type, title, theme = {}, hideGroups = []) {\n        // Содержит скрытые группы\n        this.hideGroups = hideGroups;\n        // Содержит стили от темы\n        this.theme = theme;\n        // Содержит данные групп\n        this.data = data;\n        // Ширина элемента canvas\n        this.width = width;\n        // Высота элемента canvas\n        this.height = height;\n        // Контекст элемента canvas\n        this.ctx = ctx;\n        // Тип диаграммы\n        this.type = type;\n        // Заголовок диаграммы\n        this.title = title || {};\n        // Внутренние отступы диаграммы\n        this.padding = padding;\n        // Внутренний отступ по умолчанию\n        this.defaultPadding = 10;\n        // Содержит дополнительные данные заголовка диаграммы\n        this.titleData = {\n            font: {\n                text: \"\",\n                size: null,\n                color: \"\",\n                weight: null,\n            },\n            gapBottom: null,\n            x: null,\n            y: null,\n            width: null,\n            height: null,\n        };\n    }\n    /**\n     * Определяет границы диаграммы\n     * @returns {IBounds} Границы\n     */\n    getBounds() {\n        const bounds = {\n            width: null,\n            height: null,\n            horizontal: {\n                start: (0,_helpers_isNumber__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.padding.left) ? this.padding.left : this.defaultPadding,\n                end: this.width - ((0,_helpers_isNumber__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.padding.right) ? this.padding.right : this.defaultPadding),\n            },\n            vertical: {\n                start: (0,_helpers_isNumber__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.padding.top) ? this.padding.top : this.defaultPadding,\n                end: this.height - ((0,_helpers_isNumber__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.padding.bottom) ? this.padding.bottom : this.defaultPadding),\n            },\n        };\n        bounds.width = bounds.horizontal.end - bounds.horizontal.start;\n        bounds.height = bounds.vertical.end - bounds.vertical.start;\n        return bounds;\n    }\n    /**\n     * Рисует заголовок диаграммы\n     * @returns {IChartClass}\n     */\n    drawTitle() {\n        if (!Object.keys(this.title).length) {\n            return this;\n        }\n        const { weight = 600, size, text, color = this.theme.color, } = this.title.font;\n        const font = { color, text, str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(size, weight), };\n        const sizes = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(size, weight, text, this.ctx);\n        const bounds = this.getBounds();\n        const startX = bounds.horizontal.start;\n        const endX = bounds.horizontal.end - sizes.width;\n        const posText = {\n            x: startX + (endX - startX) / 2,\n            y: bounds.vertical.start + sizes.height,\n        };\n        new _elements_Text__WEBPACK_IMPORTED_MODULE_0__[\"default\"](font, this.ctx, posText.x, posText.y).draw();\n        this.titleData = Object.assign(Object.assign(Object.assign({}, this.title), posText), sizes);\n        return this;\n    }\n    /**\n     * Определяет отступы для оси ординат\n     * @param {IAxisYClass} axisY Экземпляр класса AxisY\n     * @param {IAxisXClass} axisX Экземпляр класса AxisX\n     * @param {IChartTitle} chartTitle Содержит данные заголовка диаграммы\n     * @param {ILegendData} legend Содержит данные легенды\n     * @returns {IGapsForYPoints} Отступы\n     */\n    getGapsForYPoints(axisY, axisX, chartTitle, legend) {\n        const { gaps: gapsLegend = {}, totalHeight: legendHeight = 0, } = legend;\n        const { showText: showXText = Boolean(Object.keys(axisX.font).length), } = axisX.font;\n        const legendGapBottom = (gapsLegend.legend || {}).bottom || 0;\n        const axisYTitleHeight = ((axisY.titleData || {})).height || 0;\n        const axisYTitleGapRight = ((axisY.titleData || {})).gapRight || 0;\n        const chartTitleYPos = ((chartTitle || {})).y || 0;\n        const chartTitleGapBottom = (chartTitle || {}).gapBottom || 0;\n        const axisXTitleHeight = ((axisX.titleData || {})).height || 0;\n        const axisXTitleGapTop = ((axisX.titleData || {})).gapTop || 0;\n        const gapBottomIfRotateX = axisX.rotate ? axisX.getMaxWidthTextPoint() : axisX.getMaxHeightTextPoint();\n        return {\n            left: axisYTitleHeight + axisYTitleGapRight,\n            top: chartTitleYPos + chartTitleGapBottom + legendHeight + legendGapBottom,\n            bottom: (showXText ? axisX.gapTopAxisX + gapBottomIfRotateX : 0) + axisXTitleHeight + axisXTitleGapTop,\n        };\n    }\n    /**\n     * Определяет отступы для оси абсцисс\n     * @param {IAxisYClass} axisY Экземпляр класса AxisY\n     * @param {IAxisXClass} axisX Экземпляр класса AxisX\n     * @returns {IGapsForXPoints} Отступы ({ left, right, bottom })\n     */\n    getGapsForXPoints(axisY, axisX) {\n        const { font: axisYFont = {}, titleData: axisYTitle = {}, gapRightAxisY, } = axisY;\n        const { font: axisXFont = {}, titleData: axisXTitle = {}, } = axisX;\n        const ignoreNames = axisX.getIgnoreNames();\n        const names = axisY.getAxesData(this.data).names;\n        const lastName = names[names.length - 1];\n        const firstName = names[0];\n        const { weight = 400, size, showText: showXText = Boolean(Object.keys(axisXFont).length), } = axisXFont;\n        const { showText: showYText = Boolean(Object.keys(axisYFont).length), } = axisYFont;\n        const firstNameWidth = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(size, weight, axisX.getCorrectName(firstName).toString(), this.ctx).width;\n        const firstNameIsNotIgnore = showXText && !(ignoreNames || []).includes(firstName);\n        const lastNameWidth = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(size, weight, axisX.getCorrectName(lastName).toString(), this.ctx).width;\n        const lastNameIsNotIgnore = showXText && !(ignoreNames || []).includes(lastName);\n        const axisYTitleHeight = axisYTitle.height || 0;\n        const axisYTitleGapRight = axisYTitle.gapRight || 0;\n        const axisXTitleHeight = axisXTitle.height || 0;\n        const axisXTitleGapTop = axisXTitle.gapTop || 0;\n        return {\n            left: (firstNameIsNotIgnore ? firstNameWidth / 2 : 0) + axisYTitleHeight + axisYTitleGapRight + (showYText ? axisY.getMaxTextWidthAtYAxis() + gapRightAxisY : 0),\n            right: lastNameIsNotIgnore ? lastNameWidth / 2 : 0,\n            bottom: axisXTitleHeight + axisXTitleGapTop,\n        };\n    }\n    /**\n     * Определяет отступы для заголовка оси ординат\n     * @param {IChartTitleWithSizeAndPos} chartTitle Содержит данные заголовка диаграммы\n     * @param {ILegendData} legend Содержит данные легенды\n     * @param {IAxisX} axisX Содержит данные оси абсцисс\n     * @returns {IGapsForYTitle} Отступы ({ top, bottom })\n     */\n    getGapsForYTitle(chartTitle, legend, axisX) {\n        const { y: chartTitleY = 0, gapBottom: chartTitleGapBottom = 0, } = chartTitle;\n        const { totalHeight: legendHeight, gaps: gapsLegend = {}, } = legend;\n        const { title: axisXTitle = {}, } = axisX;\n        const { font: axisXTitleFont = {}, gapTop: axisXTitleGapTop = 0, } = axisXTitle;\n        const { size, weight = 600, text, } = axisXTitleFont;\n        const axisXTitleHeight = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(size, weight, text, this.ctx).height || 0;\n        const legendGapBottom = (gapsLegend.legend || {}).bottom || 0;\n        return {\n            top: chartTitleY + legendGapBottom + chartTitleGapBottom + legendHeight,\n            bottom: axisXTitleHeight + axisXTitleGapTop,\n        };\n    }\n    /**\n     * Определяет отступы для заголовка оси абсцисс\n     * @param {IAxisYClass} axisY Экземпляр класса AxisY\n     * @returns {IGapsForXTitle} Отступы ({ top, left })\n     */\n    getGapsForXTitle(axisY) {\n        const { titleData = {}, gapRightAxisY, } = axisY;\n        const { gapRight = 0, height = 0, } = titleData;\n        return { left: height + gapRight + gapRightAxisY, };\n    }\n    /**\n     * Определяет отступы для легенды\n     * @param {IAxisY} axisY Содержит данные оси ординат\n     * @param {IChartTitleWithSizeAndPos} chartTitle Содержит данные заголовка диаграммы\n     * @returns {IGapsForLegend} Отступы ({ top, left })\n     */\n    getGapsForLegend(axisY, chartTitle) {\n        const { y = 0, gapBottom = 0, } = chartTitle;\n        const { font = {}, } = (axisY.title || {});\n        const { size, weight = 600, text, } = font;\n        const titleAxisYHeight = (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(size, weight, text, this.ctx).height || 0;\n        return {\n            top: y + gapBottom,\n            left: titleAxisYHeight,\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Chart);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/chart/Chart.ts?");

/***/ }),

/***/ "./src/ts/ui/chart/LineChart.ts":
/*!**************************************!*\
  !*** ./src/ts/ui/chart/LineChart.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Chart */ \"./src/ts/ui/chart/Chart.ts\");\n/* harmony import */ var _elements_Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../elements/Line */ \"./src/ts/ui/elements/Line.ts\");\n/* harmony import */ var _elements_Cap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../elements/Cap */ \"./src/ts/ui/elements/Cap.ts\");\n/* harmony import */ var _elements_CustomFigure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../elements/CustomFigure */ \"./src/ts/ui/elements/CustomFigure.ts\");\n/* harmony import */ var _helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers/getStyleByIndex */ \"./src/ts/helpers/getStyleByIndex.ts\");\n\n\n\n\n\nclass LineChart extends _Chart__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(data, line, cap, pointsY, pointsX, ctx, width, height, title, padding, hideGroups, sortValues, themeForLine = {}, themeForCaps = {}) {\n        super(padding, data, ctx, width, height, \"line\", title, null, hideGroups);\n        // Содержит данные точек оси абсцисс\n        this.pointsX = pointsX;\n        // Содержит данные точек оси ординат\n        this.pointsY = pointsY;\n        // Содержит данные линии\n        this.line = line;\n        // Содержит данные колпачка\n        this.cap = cap;\n        // Содержит сортированные значения\n        this.sortValues = sortValues || \"less-more\";\n        // Содержит данные нарисованных колпачков\n        this.caps = [];\n        // Содержит стилия для линии от темы\n        this.themeForLine = themeForLine;\n        // Содержит стилия для колпачка от темы\n        this.themeForCaps = themeForCaps;\n    }\n    /**\n     * Определяет стили для графика\n     * @param {ILine} gLine Данные линии группы\n     * @param {ICap} gCap Данные колпачка группы\n     * @param {string} group Название группы (ключ объекта data)\n     * @private\n     * @returns {IChartStyle} Стили\n     */\n    _getStyles(gLine, gCap, group) {\n        const dataKeys = Object.keys(this.data);\n        const idx = dataKeys.indexOf(group);\n        const themeColorForLine = (0,_helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(idx, this.themeForLine.color);\n        const themeFillForLine = (0,_helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(idx, this.themeForLine.fill);\n        const themeColorForCap = (0,_helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(idx, this.themeForCaps.color);\n        const themeStrokeColorForCap = (0,_helpers_getStyleByIndex__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(idx, this.themeForCaps.strokeColor);\n        const lineStyle = {\n            width: gLine.width || this.line.width,\n            color: gLine.color || this.line.color || themeColorForLine,\n            dotted: gLine.dotted || this.line.dotted,\n            stepped: gLine.stepped || this.line.stepped,\n            fill: gLine.fill || this.line.fill || themeFillForLine,\n        };\n        const capStyle = {\n            size: gCap.size || this.cap.size,\n            color: gCap.color || this.cap.color || themeColorForCap,\n            stroke: gCap.stroke || this.cap.stroke || {},\n            format: gCap.format || this.cap.format,\n        };\n        return {\n            lineStyle,\n            capStyle,\n            themeStrokeColorForCap,\n        };\n    }\n    /**\n     * Определяет координаты данных группы\n     * @param {Array<IDataAtItemData>} gData Данные группы\n     * @private\n     * @returns {Array<IGroupDataCoordinates>} Массив координат у данных группы\n     */\n    _getGroupsDataCoordinates(gData) {\n        return gData.map(({ value, name, }) => {\n            // Элемент для начальной позиции Y линии\n            const findAxisYItem = this.pointsY.find((axisYItem) => axisYItem.value === value);\n            // Элемент для начальной позиции X линии\n            const findAxisXItem = this.pointsX.find((axisXItem) => axisXItem.name === name);\n            return {\n                x: findAxisXItem.x,\n                y: findAxisYItem.y,\n                value: findAxisYItem.value,\n                name: findAxisXItem.name,\n            };\n        });\n    }\n    /**\n     * Создает задний фон всей группе\n     * @param {Array<IGroupDataCoordinates>} coordinates массив координат линий графика\n     * @param {string | Array<string>} fill содержит данные о цвете заднего фона\n     * @param {boolean} stepped Правило, которое будет рисовать линию пошагово\n     * @param {string} group Группа, в которой находится линия\n     * @private\n     */\n    _setFillGroupChart(coordinates, fill, stepped, group) {\n        const firstPoint = coordinates[0];\n        const lastPoint = coordinates[coordinates.length - 1];\n        const yItemsOnScreen = this.pointsY.filter(({ onScreen, }) => onScreen);\n        const lastYPoint = yItemsOnScreen[yItemsOnScreen.length - 1];\n        const firstYPoint = yItemsOnScreen[0];\n        const lineData = {\n            moveTo: { x: firstPoint.x, y: firstPoint.y, },\n            lineTo: [],\n            fill,\n            group,\n            startY: Math.min(...coordinates.map(({ y, }) => y)),\n            endY: lastYPoint.y,\n        };\n        // Определяем координаты для будущей фигуры\n        coordinates.map(({ x, y, }, index) => {\n            if (stepped) {\n                const nextItem = coordinates[index + 1];\n                if (nextItem) {\n                    // Элемент для следующей позиции Y линии\n                    const findNextAxisYItem = this.pointsY.find((nextAxisYItem) => nextAxisYItem.value === nextItem.value);\n                    // Элемент для следующей позиции X линии\n                    const findNextAxisXItem = this.pointsX.find((nextAxisXItem) => nextAxisXItem.name === nextItem.name);\n                    lineData.lineTo.push({\n                        x: findNextAxisXItem.x,\n                        y,\n                    }, {\n                        x: findNextAxisXItem.x,\n                        y: findNextAxisYItem.y,\n                    });\n                }\n            }\n            else if (index > 0) {\n                lineData.lineTo.push({ x, y, });\n            }\n        });\n        // Закрываем фигуру\n        switch (this.sortValues) {\n            case \"less-more\":\n                lineData.lineTo.push({ x: lastPoint.x, y: lastYPoint.y, }, { x: firstPoint.x, y: lastYPoint.y, }, lineData.moveTo);\n                break;\n            case \"more-less\":\n                lineData.lineTo.push({ x: lastPoint.x, y: firstYPoint.y, }, { x: firstPoint.x, y: firstYPoint.y, }, lineData.moveTo);\n                break;\n        }\n        // Рисуем задний фон группе\n        new _elements_CustomFigure__WEBPACK_IMPORTED_MODULE_3__[\"default\"](lineData.moveTo.x, lineData.moveTo.y, lineData.fill, this.ctx, lineData.lineTo, lineData.startY, lineData.endY).draw();\n    }\n    /**\n     * Рисует линии и колпачки\n     * @param {Array<IGroupDataCoordinates>} coordinates Массив координат у данных группы\n     * @param {Array<IDataAtItemData>} gData Данные группы\n     * @param {ILine} gLine Данные линии группы\n     * @param {ICap} gCap Данные колпачка группы\n     * @param {string} group Название группы (ключ объекта data)\n     * @private\n     */\n    _drawLinesAndCaps(coordinates, gData, gLine, gCap, group) {\n        const { lineStyle, capStyle, themeStrokeColorForCap, } = this._getStyles(gLine, gCap, group);\n        // Содержит следующие позиции линии\n        const lineToArray = [];\n        // Находим координаты для линий\n        coordinates.map(({ value, name, x, y, }, index) => {\n            const nextDataItem = gData[index + 1];\n            if (nextDataItem) {\n                // Элемент для следующей позиции Y линии\n                const findNextAxisYItem = this.pointsY.find((nextAxisYItem) => nextAxisYItem.value === nextDataItem.value);\n                // Элемент для следующей позиции X линии\n                const findNextAxisXItem = this.pointsX.find((nextAxisXItem) => nextAxisXItem.name === nextDataItem.name);\n                if (!lineStyle.stepped) {\n                    lineToArray.push({ x: findNextAxisXItem.x, y: findNextAxisYItem.y, });\n                }\n                else {\n                    lineToArray.push({\n                        x: findNextAxisXItem.x,\n                        y,\n                    }, {\n                        x: findNextAxisXItem.x,\n                        y: findNextAxisYItem.y,\n                    });\n                }\n            }\n            this.caps.push({\n                group,\n                value,\n                name,\n                x: capStyle.format === \"circle\" ? x : x - capStyle.size / 2,\n                y: capStyle.format === \"circle\" ? y : y - capStyle.size / 2,\n                stroke: capStyle.stroke,\n                format: capStyle.format,\n                size: capStyle.size,\n                color: capStyle.color,\n            });\n        });\n        // Рисуем линию\n        new _elements_Line__WEBPACK_IMPORTED_MODULE_1__[\"default\"](coordinates[0].x, coordinates[0].y, lineStyle.color, this.ctx, lineToArray, lineStyle.width, lineStyle.dotted).draw();\n        // Рисуем колпачок\n        this.caps.map(({ x, y, color, format, size, stroke, }) => {\n            new _elements_Cap__WEBPACK_IMPORTED_MODULE_2__[\"default\"](size, x, y, color, format, this.ctx, 1, format === \"circle\" ? y - size : y - size / 2, format === \"circle\" ? y + size : y + size / 2, 0, {\n                width: stroke.width || 1,\n                color: stroke.color || themeStrokeColorForCap,\n            }).draw();\n        });\n    }\n    /**\n     * Рисует график\n     * @returns {ILineChartClass}\n     */\n    draw() {\n        const visibleGroups = Object\n            .keys(this.data)\n            .filter((group) => !this.hideGroups.includes(group))\n            .reduce((acc, group) => {\n            acc[group] = this.data[group];\n            return acc;\n        }, {});\n        for (const group in visibleGroups) {\n            const { data: groupData, line: groupLine = {}, cap: groupCap = {}, } = visibleGroups[group];\n            const { lineStyle, } = this._getStyles(groupLine, groupCap, group);\n            const coordinates = this._getGroupsDataCoordinates(groupData);\n            // Рисуем задний фон группе\n            if (Array.isArray(lineStyle.fill) || (typeof lineStyle.fill === \"string\" && lineStyle.fill.length)) {\n                this._setFillGroupChart(coordinates, lineStyle.fill, lineStyle.stepped, group);\n            }\n            this._drawLinesAndCaps(coordinates, groupData, groupLine, groupCap, group);\n        }\n        return this;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LineChart);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/chart/LineChart.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/BlockInfo.ts":
/*!*****************************************!*\
  !*** ./src/ts/ui/elements/BlockInfo.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Element */ \"./src/ts/ui/elements/Element.ts\");\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rect */ \"./src/ts/ui/elements/Rect.ts\");\n/* harmony import */ var _Text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Text */ \"./src/ts/ui/elements/Text.ts\");\n/* harmony import */ var _helpers_quickSort__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/quickSort */ \"./src/ts/helpers/quickSort.ts\");\n/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Line */ \"./src/ts/ui/elements/Line.ts\");\n/* harmony import */ var _CustomFigure__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CustomFigure */ \"./src/ts/ui/elements/CustomFigure.ts\");\n/* harmony import */ var _helpers_getTextSize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../helpers/getTextSize */ \"./src/ts/helpers/getTextSize.ts\");\n/* harmony import */ var _helpers_getTextStr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../helpers/getTextStr */ \"./src/ts/helpers/getTextStr.ts\");\n\n\n\n\n\n\n\n\nclass BlockInfo extends _Element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(editValue, editName, data, bounds, elements, titleData, groupsData, x, y, color, ctx, padding = {}, themeForWindow = {}, themeForLine = {}, themeForTitle = {}, themeForGroup = {}) {\n        super(x, y, color, ctx);\n        // Метод, который изменяет вид значения\n        this.editValue = editValue;\n        // Метод, который изменяет вид значения\n        this.editName = editName;\n        // Содержит данные групп\n        this.data = data;\n        // Содержит границы дигараммы\n        this.bounds = bounds;\n        // Содержит данные элементов, которые подходят по координатам мыши\n        this.elements = elements;\n        // Внутренние отступы\n        this.padding = padding;\n        // Содержит данные заголовка\n        this.titleData = titleData;\n        // Содержит данные групп\n        this.groupsData = groupsData;\n        // Ширина линий\n        this.groupLineWidth = 5;\n        // Размеры треугольника\n        this.triangleSizes = {\n            height: 10,\n            width: 15,\n        };\n        // Текст заголовка\n        this.title = elements[0].name;\n        // Стили для окна от темы\n        this.themeForWindow = themeForWindow;\n        // Стили для линии от темы\n        this.themeForLine = themeForLine;\n        // Стили для заголовка от темы\n        this.themeForTitle = themeForTitle;\n        // Стили для группы от темы\n        this.themeForGroup = themeForGroup;\n        // Жирность шрифта заголовка по умолчанию\n        this.defaultTitleFontWeight = 600;\n        // Жирность шрифта названия группы по умолчанию\n        this.defaultGroupsFontWeight = 400;\n    }\n    /**\n     * Определяет корректное значение для точки\n     * @param {number} value Значение точки\n     * @private\n     * @returns {string}\n     */\n    _getCorrectGroupValue(value) {\n        return this.editValue instanceof Function ? this.editValue(value) : value;\n    }\n    /**\n     * Определяет размеры элементов\n     * @private\n     * @returns {Array<IBlockInfoElementWithSize>} Массив, содержащий данные элементов, включая их размеры\n     */\n    _getElementsWithSize() {\n        return this.elements.map(({ group, value, color, }) => {\n            const correctGroupValue = this._getCorrectGroupValue(value);\n            const groupName = `${group}: ${correctGroupValue}`;\n            const { font: groupsFont, } = this.groupsData;\n            const { font: titleFont, } = this.titleData;\n            return {\n                group: Object.assign({ name: groupName, color }, (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(groupsFont.size, groupsFont.weight || this.defaultTitleFontWeight, groupName, this.ctx)),\n                value: Object.assign({ name: correctGroupValue.toString() }, (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(titleFont.size, titleFont.weight || this.defaultGroupsFontWeight, correctGroupValue, this.ctx)),\n            };\n        });\n    }\n    /**\n     * Определяет позицию окна\n     * @private\n     * @returns {IPos} Позиция окна ({ x, y })\n     */\n    _getCoordinates() {\n        return {\n            x: this.x + this.triangleSizes.height,\n            y: this.y,\n        };\n    }\n    /**\n     * Определяет дистанцию между группами\n     * @param {Array<IBlockInfoElementWithSizeGroup>} elements Содержит данные элементов\n     * @private\n     * @returns {number} Дистанция\n     */\n    _getTopGroupsDistance(elements) {\n        const { gaps, } = this.groupsData;\n        return elements.reduce((acc, { height, }) => {\n            acc += height + gaps.bottom;\n            return acc;\n        }, 0);\n    }\n    /**\n     * Рисует линии\n     * @param {boolean} windowIsOutOfBounds Правило, говорящее, что окно вышло за границы диаграммы\n     * @param {number} blockWidth Ширина окна\n     * @private\n     */\n    _drawLines(windowIsOutOfBounds, blockWidth) {\n        const padding = this.padding;\n        const { x, } = this._getCoordinates();\n        for (let i = 0; i < this.elements.length; i++) {\n            const { group, } = this._getElementsWithSize()[i];\n            const groupPos = this._getGroupsCoordinates(i);\n            const posX = x + blockWidth - (padding.right || 0);\n            const linePos = {\n                moveTo: {\n                    x: posX,\n                    y: groupPos.y - group.height,\n                },\n                lineTo: [\n                    {\n                        x: posX,\n                        y: groupPos.y,\n                    }\n                ],\n            };\n            if (windowIsOutOfBounds) {\n                Object.assign(linePos, {\n                    moveTo: {\n                        x: posX - (blockWidth + this.triangleSizes.height * 2),\n                        y: groupPos.y,\n                    },\n                    lineTo: [\n                        {\n                            x: posX - (blockWidth + this.triangleSizes.height * 2),\n                            y: groupPos.y - group.height,\n                        }\n                    ],\n                });\n            }\n            new _Line__WEBPACK_IMPORTED_MODULE_4__[\"default\"](linePos.moveTo.x, linePos.moveTo.y, group.color, this.ctx, linePos.lineTo, this.groupLineWidth).draw();\n        }\n    }\n    /**\n     * Определяет размеры заголовка\n     * @private\n     * @returns {ISize} Размеры ({ width, height })\n     */\n    _getTitleSize() {\n        const { font, } = this.titleData;\n        const { size, weight = this.defaultTitleFontWeight, } = font;\n        return (0,_helpers_getTextSize__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(size, weight, this.title.toString(), this.ctx);\n    }\n    /**\n     * Рисует заголовок\n     * @param {boolean} windowIsOutOfBounds Правило, говорящее, что окно вышло за границы диаграммы\n     * @param {number} blockWidth Ширина окна\n     * @private\n     */\n    _drawTitle(windowIsOutOfBounds, blockWidth) {\n        const padding = this.padding;\n        const { x, y, } = this._getCoordinates();\n        const coordinates = {\n            x: x + (padding.left || 0),\n            y: y + (padding.top || 0) + this._getTitleSize().height,\n        };\n        if (windowIsOutOfBounds) {\n            coordinates.x -= blockWidth + this.triangleSizes.height * 2;\n        }\n        const { font: titleFont, } = this.titleData;\n        const { size, color = this.themeForTitle.color, weight = this.defaultTitleFontWeight, } = titleFont;\n        const font = {\n            color,\n            text: this.title.toString(),\n            str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(size, weight),\n        };\n        new _Text__WEBPACK_IMPORTED_MODULE_2__[\"default\"](font, this.ctx, coordinates.x, coordinates.y).draw();\n    }\n    /**\n     * Определяет позицию группы\n     * @param {number} index Индекс текущей группы\n     * @private\n     * @returns {IPos} Позиция группы ({ x, y })\n     */\n    _getGroupsCoordinates(index) {\n        const { x, y, } = this._getCoordinates();\n        const { gaps = {}, } = this.titleData;\n        const padding = this.padding;\n        const prevGroups = this._getElementsWithSize().filter((element, idx) => idx <= index);\n        const top = this._getTopGroupsDistance(prevGroups.map(({ group: g, }) => g));\n        return {\n            x: x + (padding.left || 0),\n            y: y + top + this._getTitleSize().height + (gaps.bottom || 0),\n        };\n    }\n    /**\n     * Рисует группы\n     * @param {boolean} windowIsOutOfBounds Правило, говорящее, что окно вышло за границы диаграммы\n     * @param {number} blockWidth Ширина окна\n     * @private\n     */\n    _drawGroups(windowIsOutOfBounds, blockWidth) {\n        const { font: groupsFont, } = this.groupsData;\n        const { size, weight = this.defaultGroupsFontWeight, color = this.themeForGroup.color, } = groupsFont;\n        this._getElementsWithSize().map(({ group, }, index) => {\n            const font = {\n                text: group.name,\n                color,\n                str: (0,_helpers_getTextStr__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(size, weight),\n            };\n            const coordinates = this._getGroupsCoordinates(index);\n            if (windowIsOutOfBounds) {\n                coordinates.x -= blockWidth + this.triangleSizes.height * 2;\n            }\n            new _Text__WEBPACK_IMPORTED_MODULE_2__[\"default\"](font, this.ctx, coordinates.x, coordinates.y).draw();\n        });\n    }\n    /**\n     * Определяет максимальную ширину среди элементов\n     * @param {Array<IBlockInfoElementWithSize>} elements Содержит данные элементов\n     * @private\n     * @returns {number} Максимальная ширина\n     */\n    _getMaxContentWidth(elements) {\n        const sortGroup = (0,_helpers_quickSort__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(elements.map(({ group, }) => group), \"width\").reverse()[0];\n        const maxGroupWidth = sortGroup.width;\n        const titleWidth = this._getTitleSize().width;\n        return Math.max(maxGroupWidth, titleWidth);\n    }\n    /**\n     * Проверяет на выход окна за границы диаграммы\n     * @param {number} blockWidth Ширина окна\n     * @private\n     * @returns {boolean}\n     */\n    _outOfBounds(blockWidth) {\n        return this._getCoordinates().x + blockWidth > this.bounds.width;\n    }\n    /**\n     * Определяет размеры окна\n     * @private\n     * @returns {ISize} Размеры окна ({ width, height })\n     */\n    _getWindowSize() {\n        const padding = this.padding;\n        const { gaps: gapsGroups, } = this.groupsData;\n        const { gaps: gapsTitle, } = this.titleData;\n        const groups = this._getElementsWithSize().map(({ group, }) => group);\n        const width = this._getMaxContentWidth(this._getElementsWithSize()) + (padding.right || 0) + (padding.left || 0) + (gapsGroups.right || 0) + this.groupLineWidth;\n        const height = this._getTitleSize().height + this._getTopGroupsDistance(groups) + (gapsTitle.bottom || 0) + (padding.bottom || 0);\n        return { width, height, };\n    }\n    /**\n     * Рисует треугольник\n     * @private\n     * @param {boolean} windowIsOutOfBounds Правило, говорящее, что окно вышло за границы диаграммы\n     */\n    _drawTriangle(windowIsOutOfBounds) {\n        const x = this.x;\n        const y = this.y;\n        const triangleData = {\n            x: x + this.triangleSizes.height,\n            y,\n            lineTo: [\n                { x, y: y + this.triangleSizes.width / 2, },\n                { x: x + this.triangleSizes.height, y: y + this.triangleSizes.width, }\n            ],\n            startY: y,\n            endY: y + this.triangleSizes.width,\n        };\n        if (windowIsOutOfBounds) {\n            Object.assign(triangleData, {\n                x: x - this.triangleSizes.height,\n                y,\n                lineTo: [\n                    { x, y: y + this.triangleSizes.width / 2, },\n                    { x: x - this.triangleSizes.height, y: y + this.triangleSizes.width, }\n                ],\n            });\n        }\n        new _CustomFigure__WEBPACK_IMPORTED_MODULE_5__[\"default\"](triangleData.x, triangleData.y, this.color || this.themeForWindow.color, this.ctx, triangleData.lineTo, triangleData.startY, triangleData.endY).draw();\n    }\n    /**\n     * Рисует окно\n     * @param {boolean} windowIsOutOfBounds Правило, говорящее, что окно вышло за границы диаграммы\n     * @param {number} width Ширина окна\n     * @param {number} height Высота окна\n     * @private\n     */\n    _drawWindow(windowIsOutOfBounds, width, height) {\n        const coordinates = this._getCoordinates();\n        if (windowIsOutOfBounds) {\n            coordinates.x -= (width + this.triangleSizes.height * 2);\n        }\n        new _Rect__WEBPACK_IMPORTED_MODULE_1__[\"default\"](coordinates.x, coordinates.y, this.color || this.themeForWindow.color, this.ctx, width, height, coordinates.y, coordinates.y + height).draw();\n    }\n    // Рисует окно об активной группе\n    init() {\n        const windowIsOutOfBounds = this._outOfBounds(this._getWindowSize().width);\n        const { width, height, } = this._getWindowSize();\n        this._drawTriangle(windowIsOutOfBounds);\n        this._drawWindow(windowIsOutOfBounds, width, height);\n        this._drawTitle(windowIsOutOfBounds, width);\n        this._drawGroups(windowIsOutOfBounds, width);\n        this._drawLines(windowIsOutOfBounds, width);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BlockInfo);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/BlockInfo.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/Cap.ts":
/*!***********************************!*\
  !*** ./src/ts/ui/elements/Cap.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Element */ \"./src/ts/ui/elements/Element.ts\");\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rect */ \"./src/ts/ui/elements/Rect.ts\");\n/* harmony import */ var _Circle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Circle */ \"./src/ts/ui/elements/Circle.ts\");\n\n\n\nclass Cap extends _Element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(size, x, y, color, format, ctx, opacity, startY, endY, rotateDeg, stroke) {\n        super(x, y, color, ctx, rotateDeg, opacity);\n        // Формат колпачка\n        this.format = format;\n        // Размер колпачка\n        this.size = size;\n        // Объект, содержащий данные обводки ({ width, color })\n        this.stroke = stroke;\n        // Начальная позиция по оси ординат (для градиента)\n        this.startY = startY;\n        // Конечная позиция по оси ординат (для градиента)\n        this.endY = endY;\n    }\n    // Рисует колпачок\n    draw() {\n        switch (this.format) {\n            case \"circle\":\n                new _Circle__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.size, this.x, this.y, this.color, this.ctx, this.opacity, this.startY, this.endY, this.stroke).draw();\n                break;\n            case \"square\":\n                new _Rect__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.x, this.y, this.color, this.ctx, this.size, this.size, this.startY, this.endY, this.rotateDeg, this.opacity, this.stroke).draw();\n                break;\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Cap);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/Cap.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/Circle.ts":
/*!**************************************!*\
  !*** ./src/ts/ui/elements/Circle.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Element */ \"./src/ts/ui/elements/Element.ts\");\n\nclass Circle extends _Element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(radius, x, y, color, ctx, opacity, startY, endY, stroke) {\n        super(x, y, color, ctx, null, opacity);\n        // Радиус\n        this.radius = radius;\n        // Содержит данные обводки\n        this.stroke = (stroke || {});\n        // Начальная позиция по оси ординат (для градиента)\n        this.startY = startY;\n        // Конечная позиция по оси ординат (для градиента)\n        this.endY = endY;\n    }\n    // Рисует круг\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.setLineDash([0, 0]);\n        this.ctx.globalAlpha = this.opacity;\n        this.setColor(this.startY, this.endY, \"fillStyle\");\n        this.ctx.arc(this.x, this.y, this.radius, Math.PI * 2, 0);\n        this.ctx.fill();\n        if (Object.keys(this.stroke).length) {\n            this.ctx.lineWidth = this.stroke.width;\n            this.ctx.strokeStyle = this.stroke.color;\n            this.ctx.arc(this.x, this.y, this.radius, Math.PI * 2, 0);\n            this.ctx.stroke();\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Circle);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/Circle.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/CustomFigure.ts":
/*!********************************************!*\
  !*** ./src/ts/ui/elements/CustomFigure.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Element */ \"./src/ts/ui/elements/Element.ts\");\n\nclass CustomFigure extends _Element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(x, y, color, ctx, lineTo, startY, endY, opacity) {\n        super(x, y, color, ctx, opacity);\n        // Массив, содержащий данные позиций линии\n        this.lineTo = lineTo;\n        // Начальная позиция по оси ординат\n        this.startY = startY;\n        // Конечная позиция по оси ординат\n        this.endY = endY;\n    }\n    // Рисует фигуру\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.x, this.y);\n        this.ctx.globalAlpha = this.opacity;\n        this.ctx.lineCap = \"round\";\n        this.lineTo.map(({ x, y, }) => this.ctx.lineTo(x, y));\n        this.setColor(this.startY, this.endY, \"fillStyle\");\n        this.ctx.fill();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CustomFigure);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/CustomFigure.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/Element.ts":
/*!***************************************!*\
  !*** ./src/ts/ui/elements/Element.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_setGradientColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers/setGradientColor */ \"./src/ts/helpers/setGradientColor.ts\");\n\nclass Element {\n    constructor(x, y, color, ctx, rotateDeg = 0, opacity = 1) {\n        // Позиция по оси абсцисс\n        this.x = x;\n        // Позиция по оси ординат\n        this.y = y;\n        // Цвет\n        this.color = color;\n        // Контекст элемента canvas\n        this.ctx = ctx;\n        // Градус поворота\n        this.rotateDeg = rotateDeg;\n        // Прозрачность\n        this.opacity = opacity;\n    }\n    /**\n     * Устанавливает цвет\n     * @param {number} startY Начальная позиция по оси ординат\n     * @param {number} endY Конечная позиция по оси ординат\n     * @param {string} propertyToStyle Свойство, к которому нужно применять градиент\n     * @param {number} startX Начальная позиция по оси абсцисс\n     * @param {number} endX Конечная позиция по оси абсцисс\n     */\n    setColor(startY, endY, propertyToStyle, startX = 0, endX = 0) {\n        if (Array.isArray(this.color) && this.color.length > 1) {\n            (0,_helpers_setGradientColor__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.color, startY, endY, propertyToStyle, this.ctx, startX, endX);\n        }\n        else if (Array.isArray(this.color) && this.color.length === 1) {\n            this.ctx[propertyToStyle] = this.color[0];\n        }\n        else if (typeof this.color === \"string\") {\n            this.ctx[propertyToStyle] = this.color;\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Element);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/Element.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/Line.ts":
/*!************************************!*\
  !*** ./src/ts/ui/elements/Line.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Element */ \"./src/ts/ui/elements/Element.ts\");\n\nclass Line extends _Element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(x, y, color, ctx, lineTo, width, dotted) {\n        super(x, y, color, ctx);\n        // Массив, содержащий данные позиций линии\n        this.lineTo = lineTo;\n        // Ширина линии\n        this.width = width || 1;\n        // Правило, говорящее, что линия будет состоять из точек\n        this.dotted = dotted;\n    }\n    // Рисует линию\n    draw() {\n        this.ctx.setLineDash(this.dotted ? [10, 20] : [0, 0]);\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.x, this.y);\n        this.ctx.globalAlpha = this.opacity;\n        this.ctx.lineWidth = this.width;\n        this.ctx.lineCap = \"round\";\n        this.lineTo.map(({ x, y, }) => {\n            this.setColor(this.y, y, \"strokeStyle\", this.x, x);\n            this.ctx.lineTo(x, y);\n        });\n        this.ctx.stroke();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Line);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/Line.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/Rect.ts":
/*!************************************!*\
  !*** ./src/ts/ui/elements/Rect.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Element */ \"./src/ts/ui/elements/Element.ts\");\n\nclass Rect extends _Element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(x, y, color, ctx, width, height, startY, endY, rotateDeg, opacity, stroke) {\n        super(x, y, color, ctx, rotateDeg, opacity);\n        // Ширина\n        this.width = width;\n        // Высота\n        this.height = height;\n        // Начальная позиция по оси ординат (для градиента)\n        this.startY = startY;\n        // Конечная позиция по оси ординат (для градиента)\n        this.endY = endY;\n        // Содержит данные обводки ({ color, width })\n        this.stroke = stroke || {};\n    }\n    // Рисует прямоугольник\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.setLineDash([0, 0]);\n        this.ctx.globalAlpha = this.opacity;\n        this.setColor(this.startY, this.endY, \"fillStyle\");\n        this.ctx.fillRect(this.x, this.y, this.width, this.height);\n        if (Object.keys(this.stroke).length) {\n            this.ctx.lineWidth = this.stroke.width;\n            this.ctx.strokeStyle = this.stroke.color;\n            this.ctx.strokeRect(this.x, this.y, this.width, this.height);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Rect);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/Rect.ts?");

/***/ }),

/***/ "./src/ts/ui/elements/Text.ts":
/*!************************************!*\
  !*** ./src/ts/ui/elements/Text.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Element */ \"./src/ts/ui/elements/Element.ts\");\n\nclass Text extends _Element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(font, ctx, x, y, color, rotateDeg, opacity) {\n        super(x, y, color, ctx, rotateDeg, opacity);\n        // Содержит данные шрифта\n        this.font = font;\n    }\n    /**\n     * Определяет размеры текста\n     * @returns {ISize} Размеры шрифта ({ width, height })\n     */\n    getSizes() {\n        this.ctx.font = this.font.str;\n        const text = this.ctx.measureText(this.font.text);\n        return {\n            width: text.width,\n            height: text.actualBoundingBoxAscent,\n        };\n    }\n    // Рисует текст\n    draw() {\n        const { str, color, text, } = this.font;\n        this.ctx.save();\n        this.ctx.globalAlpha = this.opacity;\n        this.ctx.font = str;\n        this.ctx.fillStyle = color;\n        if (this.rotateDeg !== 0) {\n            this.ctx.translate(this.x, this.y);\n            this.ctx.rotate(this.rotateDeg);\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.fillText(text, this.x, this.y);\n        }\n        this.ctx.restore();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Text);\n\n\n//# sourceURL=webpack://ACharty/./src/ts/ui/elements/Text.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/ACharty.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});